{"title":"把所有的东西都对齐吧！","date":"2017-12-07T09:17:50.000Z","date_formatted":{"ll":"Dec 7, 2017","L":"12/07/2017","MM-DD":"12-07"},"link":"2017/12/07/css-verticalMiddle","tags":["CSS","layout"],"categories":["HTML/CSS"],"updated":"2018-09-21T10:09:15.000Z","content":"<blockquote>\n<p>“44年前我们就把人类送上了月球了，但现在我们仍然无法在css中实现垂直居中  -James Anderson”</p>\n</blockquote>\n<h1 id=\"难题\">难题<a href=\"2017/12/07/css-verticalMiddle#难题\"></a></h1><p>在CSS中对元素进行水平居中是非常简单的；<code>如果是一个行内元素，就对父元素设置text-align:center；如果是一个它是一个块级元素，就对自身应用margin:auto.</code>然而考虑到代码的DRY和较强的可维护性，如果要对一个元素进行垂直居中，可能是令人头皮发麻的一件事情了.</p>\n<a id=\"more\"></a> \n<p>就这样在前端开发圈内看似及其常见的需求，从理论上似乎极其简单，在实践中，它往往难如登天，当涉及尺寸不固定的元素时尤为如此.</p>\n<p>为了解决这一”绝世难题”，于是前端开发者们殚精竭虑，脑洞大开，琢磨出了各种解决方案，大多数并不实用.</p>\n<p>一路走来走了不少弯路，希望初入前端的小伙伴们可以走的更加通畅，总结分享给大家：</p>\n<p>下面就让我们来探索现代css的强大威力：</p>\n<h1 id=\"基于表格布局法的解决方案\">基于表格布局法的解决方案<a href=\"2017/12/07/css-verticalMiddle#基于表格布局法的解决方案\"></a></h1><p>利用表格的显示模式，需要用到一些冗余的HTML元素</p>\n<p>思路来源：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%;height:100%;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center; vertical-align: middle;\"</span>&gt;</span></span><br><span class=\"line\">          Unknown stuff to be centered.</span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>摘自：<a href=\"https://css-tricks.com/centering-in-the-unknown/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/centering-in-the-unknown/</a></p>\n<p>我们发现在table中vertical-align: middle；实现了自动垂直居中.</p>\n<p>基于曾经在网页早期风靡一时的表格布局法：实现了垂直居中</p>\n<iframe height=\"341\" scrolling=\"no\" title=\"xPNopE\" src=\"//codepen.io/okaychen/embed/xPNopE/?height=341&theme-id=dark&default-tab=js,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;margin-top:20px;\">See the Pen <a href=\"https://codepen.io/okaychen/pen/xPNopE/\" target=\"_blank\" rel=\"noopener\">xPNopE</a> by okaychen (<a href=\"https://codepen.io/okaychen\" target=\"_blank\" rel=\"noopener\">@okaychen</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>但是由于表格布局法逐渐的退出舞台，这种方法也渐渐的不为所用</p>\n<h1 id=\"基于绝对定位的解决方案\">基于绝对定位的解决方案<a href=\"2017/12/07/css-verticalMiddle#基于绝对定位的解决方案\"></a></h1><p>早期实现垂直居中方法，要求具有固定的宽度和高度：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">magin-top</span>:-<span class=\"number\">3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">9em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">6em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这种方法利用负外边距移动的方法，从而把元素放在视口的正中心.我们还可以借助强大的<code>calc</code>函数，省掉两行声明：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"built_in\">calc</span>(50%-3em);</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"built_in\">calc</span>(50%-9em);</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">6em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>显然这个方法最大的局限性就是他要求元素具有固定宽度和高度.我们知道在通常情况下，固定宽度和高度的情况是极少的，对于那些需要居中的元素来说，其尺寸往往是由其内容决定的.如果能够找到一个属性的百分比以元素自身的宽高作为基准，那么难题就迎刃而解！遗憾的是，<code>对于大多数的css属性（包括margin）来说，百分比都是以其父元素的尺寸为基准进行解析的</code>.</p>\n<p>css领域有一个很常见的现象，真正的解决方案往往来自我们最意想不到的地方：利用css变形属性，</p>\n<blockquote>\n<p>当我们在进行<code>translate（）</code>变形函数中使用百分比值时，是<code>以这个元素位基准进行转换和移动的</code>，而这正是我们所需要的.</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<iframe height=\"265\" scrolling=\"no\" title=\"css-lineCenter-position\" src=\"//codepen.io/okaychen/embed/NwQyRN/?height=265&theme-id=dark&default-tab=css,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;margin-top:20px;\">See the Pen <a href=\"https://codepen.io/okaychen/pen/NwQyRN/\" target=\"_blank\" rel=\"noopener\">css-lineCenter-position</a> by okaychen (<a href=\"https://codepen.io/okaychen\" target=\"_blank\" rel=\"noopener\">@okaychen</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>从codepen中看到，利用css变形技巧，这个容器已经完美居中，满足我们的期望.</p>\n<p>但是没有任何技巧十全十美，我们需要注意几点：</p>\n<ul>\n<li><p>我们有时不能选择决定定位，他对整个布局影响太过强烈</p>\n</li>\n<li><p>如果需要居中的元素已经在高度上超过了视口，那它的顶部部分就会被视口裁掉</p>\n</li>\n<li><p>在某些浏览器中，这个方法可能会导致元素的显示模糊，因为元素可能会被放置在半个元素上.可以用一个偏hack的手段来修复<code>transform-style:preserve-3d</code></p>\n</li>\n</ul>\n<h1 id=\"基于视口的解决方案\">基于视口的解决方案<a href=\"2017/12/07/css-verticalMiddle#基于视口的解决方案\"></a></h1><p>假设我们不使用绝对定位，仍然采用<code>translate()</code>技巧来把这个元素以其自身宽高的一半为距离进行移动；但是在缺少left和top的情况下，如何吧这个元素放在容器正中心呢？</p>\n<p>我们的第一反应很可能用margin属性的百分比值来实现，就像这样：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">1em</span> <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50%</span> auto <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>但是却产生了十分离谱的效果.原因在于<code>margin的百分比值是以父元素的宽度作为解析基准的</code></p>\n<p>在CSS值与单位（第三版）定义了一套新的单位，称为视口相关的长度单位</p>\n<ul>\n<li><p>vm是与视口宽度相关的.1vm相当于视口的1%</p>\n</li>\n<li><p>与vw类似，1vh相当于视口的1%</p>\n</li>\n<li><p>当视口宽度小于高度时，1vmin等于1vw，否则等于1vh</p>\n</li>\n<li><p>当视口宽度大于高度时，1vmax等于1vw，否则等于1vh</p>\n</li>\n</ul>\n<p>在这个例子中，我们适用外边距的是vh单位</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">1em</span>  <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50vh</span> auto <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<iframe height=\"265\" scrolling=\"no\" title=\"css-lineCenter-vm\" src=\"//codepen.io/okaychen/embed/NwQydr/?height=265&theme-id=dark&default-tab=css,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;margin-top:20px\">See the Pen <a href=\"https://codepen.io/okaychen/pen/NwQydr/\" target=\"_blank\" rel=\"noopener\">css-lineCenter-vm</a> by okaychen (<a href=\"https://codepen.io/okaychen\" target=\"_blank\" rel=\"noopener\">@okaychen</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>我们可以看到，其效果堪称完美.这个技巧更适合于在视口中居中的场景.</p>\n<h1 id=\"基于Flexbox的解决方案\">基于Flexbox的解决方案<a href=\"2017/12/07/css-verticalMiddle#基于Flexbox的解决方案\"></a></h1><p>这是毋庸置疑的最佳解决方案，因为Flexbox（伸缩盒）是专门针对这类需求所设计的.现代浏览器对于Flexbox支持度已经相当不错了</p>\n<p>我们只需要两行声明即可：先给这个待定居中元素的父元素设置<code>display:flex</code>（在使用的例子中是body元素），在给这个元素设置我们在熟悉不过的<code>margin:auto</code></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>:<span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>Flexbox还有一个好处就是，它可以将匿名容器（即使没有节点包裹的文本节点）垂直居中.</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span>center me，place！<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>借助Flexbox规范所吸引人的<code>align-items</code>和<code>justify-content</code>属性，我们可以让它内部文本也实现居中</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">18em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">10em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"把所有的东西都对齐吧！\">把所有的东西都对齐吧！<a href=\"2017/12/07/css-verticalMiddle#把所有的东西都对齐吧！\"></a></h1><p>根据盒对齐模型（第三版）的计划，在未来，对于简单的垂直居中的要求，我们完全不需要动用特殊的布局模式.我们只需要这行代码就可以搞定</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">align-self</span><span class=\"selector-pseudo\">:center</span>;</span><br></pre></td></tr></table></div></figure>\n<p>不知不觉间，我们身边的浏览器都开始让它成为现实（但是路途还很遥远：IE10及更早版本不支持，Safari 7.0 及更早版本使用-webkit前缀）</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/hack.png\" alt=\"align-self:center\" class=\"article-img\"></p>\n<p>参考</p>\n<ul>\n<li><p>《CSS Secrets 》</p>\n</li>\n<li><p>CSS-tricks：<a href=\"https://css-tricks.com/centering-in-the-unknown/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/centering-in-the-unknown/</a></p>\n</li>\n<li><p>CSS变形：<a href=\"http://w3.org/TR/css-transforms\" target=\"_blank\" rel=\"noopener\">http://w3.org/TR/css-transforms</a></p>\n</li>\n<li><p>CSS值与单位：<a href=\"http://w3.org/TR/css-values\" target=\"_blank\" rel=\"noopener\">http://w3.org/TR/css-values</a></p>\n</li>\n<li><p>CSS伸缩盒布局模型：<a href=\"http://w3.org/TR/css-flexbox\" target=\"_blank\" rel=\"noopener\">http://w3.org/TR/css-flexbox</a></p>\n</li>\n<li><p>CSS盒对齐模型：<a href=\"http://w3.org/TR/css-align\" target=\"_blank\" rel=\"noopener\">http://w3.org/TR/css-align</a></p>\n</li>\n</ul>\n","prev":{"title":"css标准盒模型、怪异模式","link":"2017/12/09/css-box-model"},"next":{"title":"同步、异步、回调执行顺序经典闭包setTimeout分析","link":"2017/12/06/js-setTimeout"},"plink":"//litten.me/2017/12/07/css-verticalMiddle/","toc":[{"title":"难题","id":"难题","index":"1"},{"title":"基于表格布局法的解决方案","id":"基于表格布局法的解决方案","index":"2"},{"title":"基于绝对定位的解决方案","id":"基于绝对定位的解决方案","index":"3"},{"title":"基于视口的解决方案","id":"基于视口的解决方案","index":"4"},{"title":"基于Flexbox的解决方案","id":"基于Flexbox的解决方案","index":"5"},{"title":"把所有的东西都对齐吧！","id":"把所有的东西都对齐吧！","index":"6"}],"copyright":{"custom":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}