{"title":"过渡与动画 - steps调速函数&CSS值与单位之ch","date":"2017-12-13T13:16:41.000Z","date_formatted":{"ll":"Dec 13, 2017","L":"12/13/2017","MM-DD":"12-13"},"link":"2017/12/13/css-animation-frameBYframe","tags":["CSS","animation"],"categories":["HTML/CSS"],"updated":"2018-09-21T10:08:42.000Z","content":"<h1 id=\"写在前面\">写在前面<a href=\"2017/12/13/css-animation-frameBYframe#写在前面\"></a></h1><p>上一篇中我们熟悉五种内置的缓动曲线和(三次)贝塞尔曲线，并且基于此完成了缓动效果.</p>\n<p>但是如果我们想要实现逐帧动画，基于贝塞尔曲线的调速函数就显得有些无能为力了，因为我们并不需要<code>帧与帧之间的过渡状态</code>，就像上篇中所看到的，所有基于贝塞尔曲线的调速函数都会在关键帧之间进行插值运算，从而产生平滑的过渡效果。</p>\n<p>这个特性显然很棒，平滑的效果确实是我们使用css过渡和动画所追求的。</p>\n<p>但是在逐帧动画的场景下，这种平滑的特性恰恰毁掉了我们想要实现的逐帧动画的效果.</p>\n<p><img src=\"http://www.chenqaq.com/assets/photos/yi.png\" alt class=\"article-img\"></p>\n<a id=\"more\"></a>\n<h1 id=\"逐帧动画\">逐帧动画<a href=\"2017/12/13/css-animation-frameBYframe#逐帧动画\"></a></h1><p>我们经常会看到一段卡通影片、一个复杂进度的提示框、一个小loading，<br>我们不会单纯的选择一张GIF动画胜任，因为它的局限性和短板表现的很明显.</p>\n<ul>\n<li>GIF图片所能使用的颜色数量被限制在256色</li>\n<li>GIF不具有Alpha透明的特性，</li>\n<li>GIF动画一旦生成，参数就固定在文件内部，只能通过图像处理软件去重新生成.<br>在某些场景下，基于图片的逐帧动画成了不错的选择。</li>\n</ul>\n<p><img src=\"http://www.chenqaq.com/assets/images/loading.jpg\" alt class=\"article-img\"></p>\n<h1 id=\"steps-调速函数\">steps()调速函数<a href=\"2017/12/13/css-animation-frameBYframe#steps-调速函数\"></a></h1><p>写在前面中提到，我们不能基于贝塞尔曲线的调速函数完成我们所需要的逐帧动画，那么采用什么调速函数呢？</p>\n<p>对，答案就是<code>steps()</code>调速函数,与贝塞尔曲线迥然不同的是，<code>steps()</code>会根据你指定的步进数量，把动画分为很多帧，而且整个动画会在<code>帧与帧之间硬切</code>,不会像贝塞尔曲线那样做插值处理。</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/xy.png\" alt=\"对比step(8)、linear以及默认ease的差异\" class=\"article-img\"></p>\n<p>通过上图我们可以很明显看出steps(8)、linear和ease的区别.</p>\n<p>其实这种硬切效果是我们极力避免的，因此我们也很少听到关于<code>steps()</code>的讨论。在CSS调速函数的世界里，基于<code>贝塞尔曲线</code>的调速函数就像是被人追捧的白天鹅，而<code>steps()</code>则是旁人唯恐不及的丑小鸭。</p>\n<p><img src=\"http://www.chenqaq.com/assets/photos/ch.jpg\" alt class=\"article-img\"></p>\n<p>其实无所谓好与不好，更多的是适合与不适合，我们都崇拜的贝塞尔曲线在像小”loading”这样的逐帧动画中失败了，而<code>steps()</code>却展示出我们想要的效果.</p>\n<p>这个想法最初是Simurai在他的博客中推出<a href=\"http://simurai.com/blog/2012/12/03/step-animation\" target=\"_blank\" rel=\"noopener\">http://simurai.com/blog/2012/12/03/step-animation</a>，他使用<code>steps()</code>实现拼合图片的动画效果.让人印象深刻 </p>\n<iframe height=\"265\" scrolling=\"no\" title=\"Steps Animation\" src=\"//codepen.io/simurai/embed/tukwj/?height=265&theme-id=dark&default-tab=css,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;margin-top:20px\">See the Pen <a href=\"https://codepen.io/simurai/pen/tukwj/\" target=\"_blank\" rel=\"noopener\">Steps Animation</a> by simurai (<a href=\"https://codepen.io/simurai\" target=\"_blank\" rel=\"noopener\">@simurai</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<h1 id=\"ch单位-css值与单位第三版\">ch单位 - css值与单位第三版<a href=\"2017/12/13/css-animation-frameBYframe#ch单位-css值与单位第三版\"></a></h1><p>有时候，我们希望一段为本字符逐个显示，模拟出一种打字的效果。这种效果在技术类网站中尤为常见，用等宽字体可以营造出一种终端命令行的感觉.</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>CSS is amazing!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> typing&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">7.7em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:typing <span class=\"number\">8s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们想要模拟出一种打字效果，但是</p>\n<ul>\n<li>整个动画是平滑连贯的，而不是逐字显示</li>\n<li>目前我们已经使用em指定宽度是7.7，虽然他比像素单位好一些，但是仍然不够理想，这个宽度为什么是7.7em.</li>\n</ul>\n<p><img src=\"http://www.chenqaq.com/assets/photos/mi.jpg\" alt class=\"article-img\"></p>\n<p>我们很自然的想到了使用<code>steps()</code>来修复第一个问题，但是不幸的是，我们所需要的步进数量是由字符的数量来决定的</p>\n<p><code>CSS值与单位(第三版)</code>规范引入了一个新的单位，表示”0”字形的宽度。大多数场景下，我们不必关心”0”字形的宽度到底有多宽，因为在等宽字体中，”0”字形的宽度和其他所有字形的宽度是一样的。因此，我们如果使用ch单位来表示h1的宽度，那取值实际上就是字符的数量：在上面的例子中就是15</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> typing&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>&#123; <span class=\"attribute\">width</span>:<span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> caret&#123;</span><br><span class=\"line\">    50%&#123; <span class=\"attribute\">border-color</span>:transparent &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">15ch</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>:<span class=\"number\">0.5em</span> solid;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:typing <span class=\"number\">6s</span> <span class=\"built_in\">steps</span>(15),caret <span class=\"number\">1s</span> <span class=\"built_in\">steps</span>(1) infinite;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>但是我们还是有些疑问：</p>\n<ul>\n<li>这样的代码是不易维护的，当更新标题的时候，我们总是需要根据字符的数量来指定不同的宽度样式和<code>steps()</code>函数，这时候正是JavaScript的用武之地<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$$</span>(<span class=\"params\">selector,context</span>)</span>&#123;</span><br><span class=\"line\">    context = context||<span class=\"built_in\">document</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements = context.querySelector(selector);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(elements);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$$(<span class=\"string\">'h1'</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">h1</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = h1.textContent.length,s = h1.style;</span><br><span class=\"line\"></span><br><span class=\"line\">    s.width = len + <span class=\"string\">'ch'</span>;</span><br><span class=\"line\">    s.animationTimingFunction = <span class=\"string\">\"steps(\"</span> + len + <span class=\"string\">\"),steps(1)\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure></li>\n<li>如果浏览器不支持ch单位，我们该怎么办？这时候就需要实现样式的回退，如果不希望字体出现异常，会选择补一行em作为单位的回退样式</li>\n</ul>\n<h1 id=\"写在最后\">写在最后<a href=\"2017/12/13/css-animation-frameBYframe#写在最后\"></a></h1><p>这一篇主要基于<code>steps()</code>函数和<code>ch单位</code>,详细的比较了<code>steps()</code>调速函数和基于贝塞尔曲线调速函数的区别，虽然<code>steps()</code>调速函数像是旁人唯恐不及的丑小鸭，但是它亦有其独特的魅力。</p>\n","prev":{"title":"express中间件，一篇文章就够了","link":"2017/12/18/express-middleware-use"},"next":{"title":"css标准盒模型、怪异模式&&box-sizing属性","link":"2017/12/09/css-box-model"},"plink":"//litten.me/2017/12/13/css-animation-frameBYframe/","toc":[{"title":"写在前面","id":"写在前面","index":"1"},{"title":"逐帧动画","id":"逐帧动画","index":"2"},{"title":"steps()调速函数","id":"steps-调速函数","index":"3"},{"title":"ch单位 - css值与单位第三版","id":"ch单位-css值与单位第三版","index":"4"},{"title":"写在最后","id":"写在最后","index":"5"}],"copyright":{"custom":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}