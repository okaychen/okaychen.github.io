{"title":"跟着underscore学习防抖和节流","date":"2018-03-20T07:54:44.000Z","date_formatted":{"ll":"Mar 20, 2018","L":"03/20/2018","MM-DD":"03-20"},"link":"2018/03/20/js-debounce-throttle","tags":["underscore","防抖与节流"],"categories":["JavaScript"],"updated":"2018-09-21T03:42:09.000Z","content":"<h1 id=\"有个开始吧！\">有个开始吧！<a href=\"2018/03/20/js-debounce-throttle#有个开始吧！\"></a></h1><p>网上有很多的防抖与节流的文章，自己也早有耳闻，之前看underscore的代码，也发现了两个与众不同的函数debounce和throttle，仿佛是有特定的用途。学习实践之后便总结下这篇文章。</p>\n<a id=\"more\"></a>\n<p>在前端开发中经常遇到一些频繁触发的事件，比如</p>\n<ul>\n<li>键盘事件：keyup、keydown…</li>\n<li>window：resize、scroll…</li>\n<li>鼠标事件：mousedown、mousemove…</li>\n</ul>\n<p>那么什么是事件的频发触发呢？让我们写一个例子来了解事件的频繁触发；</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>学习事件的频发触发<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">      width: 50vw;</span><br><span class=\"line\">      height: 30vh;</span><br><span class=\"line\">      margin: 50px auto;</span><br><span class=\"line\">      background: yellowgreen;</span><br><span class=\"line\">      border-radius: 5px;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">      line-height: 30vh;</span><br><span class=\"line\">      font-size: 30px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"debounce.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>debounce.js代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  container.innerHTML++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">container.onmousemove = getAction;</span><br></pre></td></tr></table></div></figure>\n<p>效果如下：</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/debounce1.gif\" alt=\"时间频发触发\" class=\"article-img\"></p>\n<p>我们发现鼠标从盒子左侧平稳的滑到右侧，数字从1增加到了188，也就是说在极短的时间内getAction这个函数就触发了188次。可想而知，如果这个问题是复杂回调或者ajax请求等等，每个回调就必须在更短的时间内执行完毕，否则就会出现卡顿现象。</p>\n<p>对于这个问题，防抖和节流就是两种很好的解决方案。</p>\n<h1 id=\"防抖与节流介绍\">防抖与节流介绍<a href=\"2018/03/20/js-debounce-throttle#防抖与节流介绍\"></a></h1><p>防抖的原理就是：尽管时间触发，但是我一定要到事件触发n秒后才执行。如果在这个时间内又触发了这个事件，那就以新的事件的时间为准，触发n秒后才执行。主要是通过定时器来实现</p>\n<p>而节流的原理是：如果持续触发事件，每隔一段时间，只执行一次事件。主要通过时间戳或者定时器来实现</p>\n<h1 id=\"实现防抖debounce\">实现防抖debounce<a href=\"2018/03/20/js-debounce-throttle#实现防抖debounce\"></a></h1><p>根据原理我们就可以来写第一版debounce代码：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      clearTimeout(timeout)</span><br><span class=\"line\">      timeout = setTimeout(func, wait);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">container.onmousemove = debounce(getAction, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></div></figure>\n<p>效果如下</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/debounce2.gif\" alt=\"debounce第一版\" class=\"article-img\"></p>\n<p>从效果中很明显可以看出来，无论开始怎么在盒子内移动鼠标，数值都不会加1，直到鼠标停下来，并且等待1s后，getAction函数执行使数值加1。</p>\n<h3 id=\"this带来的问题\">this带来的问题<a href=\"2018/03/20/js-debounce-throttle#this带来的问题\"></a></h3><p>如果在getAction函数中<code>console.log(this)</code>，在不使用debounce函数时，<code>this</code>的值为</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>但是我们在使用我们的debounce函数时，这个this就指向了window！（这是由于嵌套函数内部的this都会失去方向，指向window对象。可参见我写的<a href=\"http://www.cnblogs.com/okaychen/p/7520472.html\" target=\"_blank\" rel=\"noopener\">this四种绑定方式之间的奇淫技巧</a>）</p>\n<p>所以我们必须要将this指向正确的对象：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">timeout</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      func.apply(context);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"event对象\">event对象<a href=\"2018/03/20/js-debounce-throttle#event对象\"></a></h3><p>JavaScript在事件处理函数中提供事件对象event；</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAction</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  container.innerHTML = count++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>如果我们不使用debounce函数，通过container.onmousemove调用，这里便会打印出MouseEvent对象<br><img src=\"http://www.chenqaq.com/assets/images/debounce3.png\" alt=\"MouseEvent\"></p>\n<p>但是如果在通过debounce函数，却只会打印出undefined!让我们来改善一下debounce函数</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    clearTimeout(timeout)</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      func.apply(context, args)</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>到此为止，在我们根据原理写的debounce的基础上，我们又解决了this指向和event对象的问题。</p>\n<h3 id=\"立即执行\">立即执行<a href=\"2018/03/20/js-debounce-throttle#立即执行\"></a></h3><p>这时候我们的代码已经很完善了，但是我们应该考虑到的一点是：<br>上面的代码我们总是需要等到事件停止触发n秒后。<br>我们想要的是：开始时候立即执行函数，然后等到停止触发n秒后，才可以重新触发执行。<br>我们加一个immediate参数判断是否立即执行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout, result;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果已经执行过，不再执行</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">      timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;, wait)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callNow) result = func.apply(context, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        func.apply(context, args);</span><br><span class=\"line\">      &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"取消\">取消<a href=\"2018/03/20/js-debounce-throttle#取消\"></a></h3><p>最后我们希望能够取消debounce函数，比如我们的debounce函数的时间间隔是10秒钟，immediate为true，这样的话，我们只有等待10s后才可以触发事件，所以我希望能有一个按钮能够取消防抖，这样再去触发，就可以又立刻执行啦。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout, result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> debounced = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) clearTimeout(timeout);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已经执行过，不再执行</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> callNow = !timeout;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) result = func.apply(context, args)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    debounced.cancel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        clearTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> debounced;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们如何使用cancel函数呢？依然以上面的demo为例</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  container.innerHTML++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> setAction = debounce(getAction,<span class=\"number\">10000</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">container.onmousemove = setAction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  setAction.cancel();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>效果演示如下：<br><img src=\"http://www.chenqaq.com/assets/images/debounce3.gif\" alt=\"debounce cancel\"></p>\n","prev":{"title":"碎言心语-短笔记","link":"2018/04/09/life-aboutIT"},"next":{"title":"浏览器同源政策","link":"2018/03/15/cross-domain-cors"},"plink":"//litten.me/2018/03/20/js-debounce-throttle/","toc":[{"title":"有个开始吧！","id":"有个开始吧！","index":"1"},{"title":"防抖与节流介绍","id":"防抖与节流介绍","index":"2"},{"title":"实现防抖debounce","id":"实现防抖debounce","index":"3"}]}