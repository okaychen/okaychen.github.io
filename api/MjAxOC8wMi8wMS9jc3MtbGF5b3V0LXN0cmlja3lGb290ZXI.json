{"title":"stricky footer的三种解决方案","date":"2018-02-01T13:06:54.000Z","date_formatted":{"ll":"Feb 1, 2018","L":"02/01/2018","MM-DD":"02-01"},"link":"2018/02/01/css-layout-strickyFooter","tags":["CSS","layout"],"categories":["HTML/CSS"],"updated":"2018-09-21T03:50:26.000Z","content":"<h1 id=\"写在前面\">写在前面<a href=\"2018/02/01/css-layout-strickyFooter#写在前面\"></a></h1><p>stricky footer设计是最古老和最常见的效果之一，我们都曾经历过类似的情景：</p>\n<blockquote>\n<p>如果页面内容不够长的时候，页脚块粘贴在底部；如果内容足够长时，页脚块会被内容向下推送。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>这些天做vue+express实战的练习，跟着黄轶老师倒是认识了stricky footer，就认真的了解学习了一下，但是前两天的问题，今天几种解决方案的详细情况竟然有些模糊，所以还是记录下来吧！求学之路就是这样，不断地积累和重复。</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/strickyFooter1.png\" alt class=\"article-img\"></p>\n<p>上图底部的<code>x</code>就用到了经典的stricky footer，当页面内容足够时，它会向下推送；当页面内容没有撑满整个屏幕时，它就固定在底部。</p>\n<p>而不是像下图这样：</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/strickyFooter2.png\" alt class=\"article-img\"></p>\n<h1 id=\"问题\">问题<a href=\"2018/02/01/css-layout-strickyFooter#问题\"></a></h1><p>如果此前不知道stricky footer，使用fixed固定在底部的话，像下图这样</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/strickyFooter3.png\" alt class=\"article-img\"></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">fixed</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 32<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 32<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">bottom</span>: 20<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span>: <span class=\"selector-tag\">calc</span>(50% <span class=\"selector-tag\">-</span> 16<span class=\"selector-tag\">px</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">font-size</span>: 32<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>那样 <code>x</code> 会覆盖内容，显然是不符合要求的不实际的，而且不美观的。</p>\n<p>所以经典的stricky footer 广为所用，适用情景也非常多，前几天回顾第一次做的项目，发现很多地方适用。</p>\n<h1 id=\"解决方案\">解决方案<a href=\"2018/02/01/css-layout-strickyFooter#解决方案\"></a></h1><p>stricky footer主要有三种解决方案，我们构建一点简单的代码</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"1-为内容区域添加最小的高度\">1.为内容区域添加最小的高度<a href=\"2018/02/01/css-layout-strickyFooter#1-为内容区域添加最小的高度\"></a></h2><p>这个方法主要是用视口vh来计算整体视窗的高度，然后减去底部footer的高度，从而得出内容区域的最小高度</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>:<span class=\"built_in\">calc</span>(100vh - `footer的高度`);</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这种方法很简单，但是如果页面的footer高度不同，每个页面都要重新计算一次，所以并不推荐</p>\n<h2 id=\"2-使用flex布局\">2.使用flex布局<a href=\"2018/02/01/css-layout-strickyFooter#2-使用flex布局\"></a></h2><p>flex布局如今在移动端布局可谓是占有一片天地，广为所用。</p>\n<p>我们通常利用flex布局对视窗宽度进行分割，一侧是固定宽度，另一侧是自适应宽度。同样的，flex布局当然也可以对对视窗高度进行分割，footer的flex为0，这样flex获得其固有的高度；content的flex为1。这样它会充满除去footer的其余部分</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>:column;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>:<span class=\"number\">100vh</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这种方法较为推荐</p>\n<h2 id=\"3-在content的外面添加一个wrapper层\">3.在content的外面添加一个wrapper层<a href=\"2018/02/01/css-layout-strickyFooter#3-在content的外面添加一个wrapper层\"></a></h2><p>这种方法也是黄轶老师使用的方法，在content的外面添加一个wrapper层包裹</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-wrapper clearfix\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>这种做法为了保证兼容性，我们通常会在wrapper层上添加一个clearfix类，</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>,<span class=\"selector-class\">.content-wrapper</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-class\">.content-wrapper</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:auto;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">150px</span> //与footer的高度相同</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">  margin-top:-150px; // -`footer高度`</span><br><span class=\"line\">  <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:150px</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">clear</span><span class=\"selector-pseudo\">:both</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">  <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这样就完成了stricky footer，这种方法也比较推荐，但是加入的代码有点多，而且改变了HTML结构。</p>\n","prev":{"title":"拥抱未来的布局方式：flex 和 grid","link":"2018/03/07/css-layout-flex-grid"},"next":{"title":"一月就要结束，我的2018年已经开始！","link":"2018/01/25/life-aboutLife-job"},"plink":"//litten.me/2018/02/01/css-layout-strickyFooter/","copyright":{"custom":"123..."}}