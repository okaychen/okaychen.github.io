{"title":"同步、异步、回调执行顺序经典闭包setTimeout分析","date":"2017-12-06T09:47:14.000Z","date_formatted":{"ll":"Dec 6, 2017","L":"12/06/2017","MM-DD":"12-06"},"link":"2017/12/06/js-setTimeout","tags":["JS","event queue","stack","运行机制"],"categories":["JavaScript"],"updated":"2018-09-21T10:08:08.000Z","content":"<h1 id=\"聊聊同步、异步和回调\">聊聊同步、异步和回调<a href=\"2017/12/06/js-setTimeout#聊聊同步、异步和回调\"></a></h1><p>同步，异步，回调，我们傻傻分不清楚，</p>\n<p>有一天，你找到公司刚来的程序员小T，跟他说：“我们要加个需求，你放下手里的事情优先支持，我会一直等你做完再离开”。小T微笑着答应了，眼角却滑过一丝不易觉察的杀意。</p>\n<p>世界上的所有事情大致可以分为同步去做和异步去做两种。你打电话去订酒店，电话另一边的工作人员需要查下他们的管理系统才能告诉你有没有房间。</p>\n<p>这时候你有两种选择：一种是不挂电话一直等待，直到工作人员查到为止（可能几分钟也可能几个小时，取决于他们的办事效率），这就是同步的。</p>\n<p>另一种是工作人员问了你的联系方式就挂断了电话，等他们查到之后再通知你，这就是异步的，这时候你就可以干点其他事情，比如把机票也定了之类的</p>\n<blockquote>\n<p> 计算机世界也是如此，我们写的代码需要交给cpu去处理，这时候就有同步和异步两种选择。js是单线程的，如果所有的操作（<code>ajax</code>,获取文件等I/O操作<code>&lt;node&gt;</code>）都是同步的，遇到哪些耗时的操作，后面的程序必然被阻塞而不能执行，页面也就失去了响应，</p>\n</blockquote>\n<blockquote>\n<p>因此js采用了事件驱动机制，在单线程模型下，使用异步回调函数的方式来实现非阻塞的IO操作，</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>那么什么是异步任务呢？（参考阮一峰老师《JavaScript运行机制》）</p>\n<p>异步任务也就是 指主线程（stack栈）运行的过程中，当stack空闲的时候，主线程对event queque（队列）轮询(事实上一直在轮询)后，将异步任务放到stack里面进行执行；</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/event.png\" alt=\"（上图转引自Philip Roberts的演讲《Help, I&#39;m stuck in an event-loop》））\" class=\"article-img\"></p>\n<p> 简单的说，如果我们指定过回调函数，那么当事件发生时就会进入事件队列，等待主线程的<code>stack</code>空闲的时候，就会对<code>event queue</code>里面的回调读取并放到<code>stack</code>里面执行</p>\n<p>我们经常说的可能是异步回调（当然也有同步回调），所以也就并不难理解，回调和异步之间其实并没有直接的联系，回调只是异步的一种实现方式， </p>\n<p>通过这样的<code>event loop</code>我们其实可以分析出三者的执行顺序，即 <code>同步 &gt; 异步 &gt; 回调</code></p>\n<h1 id=\"经典闭包setTimeout分析\">经典闭包setTimeout分析<a href=\"2017/12/06/js-setTimeout#经典闭包setTimeout分析\"></a></h1><p>今天同学问了我一个问题，我一看是一道经典的面试题，问题如下：</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/questions.png\" alt=\"question\" class=\"article-img\"></p>\n<p>简单的这个问题改一下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">     setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">     &#125;, i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log( <span class=\"string\">' i : '</span> , i );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log( i );</span><br></pre></td></tr></table></div></figure>\n\n<p>相信我们很多人都遇到过这个问题，心中或许都有答案：</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/results.png\" alt=\"result\" class=\"article-img\"></p>\n<p>那么为什么并不是入门者心中所想要的结果嘞(为什么<code>setTimeout</code>中打印出<code>i</code>全部是<code>6</code>，而且是最后才打印出来呢)？</p>\n<p>那么就让我们来梳理一下，第一部分<code>event loop</code>图片很直观的体现：”任务队列”可以放置异步任务的事件，也可以放置定时事件（<code>setTimeout</code>和<code>setinterval</code>），即指定某些代码在多少时间之后执行；</p>\n<p> 1、首先我们先来看一下他的主体结构：<code>for</code>循环的第一层是<code>setTimeout</code>函数，<code>setTimeout</code>函数中使用了一个匿名（回调）函数</p>\n<p> 2、还记的我们之前总结的执行顺序：同步 &gt; 异步 &gt; 回调 吧！</p>\n<p>　   for循环和外层的 <code>console.log()</code>是同步的，<code>setTimeout</code>是回调执行，</p>\n<blockquote>\n<p>所以按照执行顺序，先执行for循环，然后进入for循环中，他发现了一个<code>setTimeout()</code>回调(进入<code>event queque</code>事件队列，等待<code>stack</code>栈为空后读取并放入栈中后执行)，</p>\n</blockquote>\n<blockquote>\n<p>这时候他并不会等待，而是继续执行 –&gt; for循环内部的  <code>console.log( &#39; i : &#39; , i )</code>  –&gt;  for循环外部的<code>console.log( i )</code> ，然后”任务队列”中的回调函数才进入到空<code>Stack</code>中开始执行；</p>\n</blockquote>\n<p> 我们在来用这个例子尝试一下上面的event loop图，更加直观的感受一下：</p>\n<p> <img src=\"http://www.chenqaq.com/assets/images/eventMe.png\" alt class=\"article-img\"></p>\n<p> 那么接下来可能会问怎么解决这个问题呢？我想最简单的当然是<code>let</code>语法了，</p>\n <figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">      &#125;, i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log( <span class=\"string\">' 1 : '</span> , i );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log( i );</span><br></pre></td></tr></table></div></figure>\n\n<p> 我们都知道<code>es5</code>中变量作用域是函数，而<code>es6</code>却可以使用<code>let</code>声明一个具有块级作用域的i，在这里也就是<code>for</code>循环体；</p>\n<p>在这里<code>let</code>本质上就是形成了一个闭包，那么写成<code>es5</code>的形式其实等价于：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_i</span>) </span>&#123;</span><br><span class=\"line\">     setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log( _i);</span><br><span class=\"line\">     &#125;, _i*<span class=\"number\">1000</span>);</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'2：'</span>,_i)  </span><br><span class=\"line\"> &#125;; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> _i = <span class=\"number\">0</span>; _i &lt;= <span class=\"number\">5</span>; _i++) &#123;  </span><br><span class=\"line\">      loop(_i); </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"总结\">总结<a href=\"2017/12/06/js-setTimeout#总结\"></a></h1><p>到这里，我们就完成了从同步、异步、回调的机制分析 到 setTimeout的经典案例的分析，JavaScript博大精深，我们需要了解他的机制去深入去挖掘他。</p>\n","prev":{"title":"把所有的东西都对齐吧！","link":"2017/12/07/css-verticalMiddle"},"next":{"title":"手起刀落-一起写经典的贪吃蛇游戏","link":"2017/12/05/js-snakey"},"plink":"//litten.me/2017/12/06/js-setTimeout/","toc":[{"title":"聊聊同步、异步和回调","id":"聊聊同步、异步和回调","index":"1"},{"title":"经典闭包setTimeout分析","id":"经典闭包setTimeout分析","index":"2"},{"title":"总结","id":"总结","index":"3"}]}