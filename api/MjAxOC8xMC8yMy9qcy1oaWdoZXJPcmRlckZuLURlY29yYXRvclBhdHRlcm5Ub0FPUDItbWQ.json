{"title":"用AOP装饰函数-实践篇","date":"2018-10-23T08:16:47.000Z","date_formatted":{"ll":"Oct 23, 2018","L":"10/23/2018","MM-DD":"10-23"},"link":"2018/10/23/js-higherOrderFn-DecoratorPatternToAOP2-md","tags":["AOP","JS","装饰者模式"],"categories":["JavaScript","设计模式"],"updated":"2018-11-19T04:00:51.000Z","content":"<h1 id=\"后续：纸上得来终觉浅\">后续：纸上得来终觉浅<a href=\"2018/10/23/js-higherOrderFn-DecoratorPatternToAOP2-md#后续：纸上得来终觉浅\"></a></h1><p>老大见小T终于摸清了用AOP装饰函数的一些套路，很是欣慰，决定用实际情景让他试一试，老大拿出了一个最常见的AOP的经典应用之一—数据统计上报的情景，分离业务代码和数据统计上报的代码，在实际开发中项目结尾阶段难免要加上很多统计数据的代码，这个过程可能被迫改动早已封装好的函数.</p>\n<a id=\"more\"></a>\n<p>1.老大给小T设定了一个情景如下：页面中有一个登录的button，点击这个button会弹出登录的浮层，与此同时需要进行数据上报来统计有多少用户点击了这个登录的button(这个任务可能是在项目结尾阶段进行的)，让小T发现问题并进行改写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> login = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'login'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> textlogin = login.tagName;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> x = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> showLogin = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开登录浮层'</span>);</span></span><br><span class=\"line\">            log(textlogin);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> log = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tag</span>) </span>&#123;</span></span><br><span class=\"line\">            x = x + 1;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'上报标签为：'</span> + tag +<span class=\"string\">','</span>+ <span class=\"string\">'上报次数为：'</span> + x);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 这里我简单的用login按钮单击的次数来模拟，上报过程略</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        login.onclick = showLogin;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>小T发现在showLogin函数里既要弹层又要上报点击次数，两个层面的功能，却被耦合在一个函数中，决定用昨天刚写好的AOP试一试:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">afterfn</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> _self = <span class=\"keyword\">this</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">let</span> ret = _self.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                afterfn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">return</span> ret;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> login = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'login'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> textlogin = login.tagName;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> x = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> showLogin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'打开登录浮层'</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> log = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\">            x = x+1;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'上报标签为：'</span> + tag +<span class=\"string\">','</span>+ <span class=\"string\">'上报次数为：'</span> + x);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        showLogin = showLogin.after(log); <span class=\"comment\">// 打开登录浮层后上报数据</span></span></span><br><span class=\"line\">        login.onclick = showLogin;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>小T欣喜若狂，这样两个不同层面功能的函数就可以单独维护，不存在耦合问题，决定把自己的成果给老大展示一番，老大看了微微一笑点了点头，觉得小T的进步着实很快，决定让他尝试一下用AOP动态改变函数的参数。</p>\n<p>2.现有一个用于发起ajax请求的函数，这个函数负责项目中所有ajax的异步请求，这个ajax函数一直运转良好，跟CGI合作也很愉快，直到一次遭受了CSRF攻击，解决CSRF攻击最简单的方法就是在HTTP请求中加一个token参数，我们虽然可以选择直接多加一个token参数在ajax函数中。但是整个函数会变得十分僵硬，虽然对于现在的项目没有问题，但是将来把这个函数移植到其他项目，或者一个开源库中供他人使用，token参数都将是多余的。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向后台 cgi 发起一个请求来获取用户信息,传递给 cgi 的参数是baseParam和&#123; name:'sven' &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> baseParam = &#123;</span><br><span class=\"line\">    modname: modname,</span><br><span class=\"line\">    orgcode: localorgcode,</span><br><span class=\"line\">    cmduuid: cmduuid</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type,url,data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(dir);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            type:type,</span><br><span class=\"line\">            url:url,</span><br><span class=\"line\">            data:<span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">Object</span>.assign(&#123;&#125;, baseParam, data)),</span><br><span class=\"line\">            success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 简单假设不做处理</span></span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">                reject(data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'http:// xxx.com/userinfo'</span>,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'sven'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于生成token的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getToken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Token'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//僵硬的在ajax函数中添加</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type,url,data</span>)</span>&#123;</span><br><span class=\"line\">    data = data || &#123;&#125;;</span><br><span class=\"line\">    data.token = getToken();</span><br><span class=\"line\">    <span class=\"comment\">// 发送ajax请求略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>小T看到这里，觉得老大讲的确实有道理，僵硬的在ajax函数中增加传递参数也是正确的，但是复用性不大，无论是换一个项目还是在开源库中供别人使用，这个token都可能会是多余的，小T决定在不修改ajax原函数的情况下用AOP试一下改变函数的参数：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforefn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        beforefn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _self.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getToken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Token'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ajax = ajax.before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type,url,data</span>)</span>&#123;</span><br><span class=\"line\">    data.Token = getToken();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">ajax( <span class=\"string\">'get'</span>, <span class=\"string\">'http:// xxx.com/userinfo'</span>, &#123; <span class=\"attr\">name</span>:<span class=\"string\">'sven'</span> &#125; );</span><br></pre></td></tr></table></div></figure>\n<p>小T打印出来向后台cgi传递的参数，发现多了token参数<code>{name: &quot;sven&quot;, Token: &quot;Token&quot;}</code>，小T发现用AOP的方式给ajax函数动态装饰上Token参数，保证了ajax是一个纯净的函数，提高ajax函数的复用性。<br>最后老大决定拿出来杀手锏，插件式的表单验证，想试一下小T是不是能融会贯通:</p>\n<p>3.在web项目中，可能存在非常多的表单，如登录，注册，修改用户信息。在表单数据提交给后台之前，常常需要做一些校验，比如登录时需要验证用户名和密码是否为空，这样形如一个formSubmit函数就既要承担提交ajax请求，还要验证用户输入的合法性。这样一来就会造成代码的臃肿，职责混乱，二来谈不上复用性。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submitBtn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> username = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'username'</span> ),</span></span><br><span class=\"line\"><span class=\"javascript\">            password = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'password'</span> ),</span></span><br><span class=\"line\"><span class=\"javascript\">            submitBtn = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">'submitBtn'</span> );</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">const</span> formSubmit = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">if</span>(username.value == <span class=\"string\">''</span>)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    retrun alert(<span class=\"string\">'用户名不能为空'</span>);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">if</span>(password.value == <span class=\"string\">''</span>)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                    <span class=\"keyword\">return</span> alert(<span class=\"string\">'密码不能为空'</span>);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">let</span> param = &#123;</span></span><br><span class=\"line\">                    username = username.value,</span><br><span class=\"line\">                    password = password.value</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">                ajax(<span class=\"string\">'http://xxx.com/login'</span>,param); <span class=\"comment\">//ajax实现略</span></span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">            submitBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\">                formSubmit();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>小T看到这，决定先把校验的逻辑放到validata函数中：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validata = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username.value == <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        retrun alert(<span class=\"string\">'用户名不能为空'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(password.value == <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> alert(<span class=\"string\">'密码不能为空'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> formSubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( validata() === <span class=\"literal\">false</span> )&#123; <span class=\"comment\">//校验未通过</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> param = &#123;</span><br><span class=\"line\">        username = username.value,</span><br><span class=\"line\">        password = password.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   ajax(<span class=\"string\">'http://xxx.com/login'</span>,param); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">submitBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    formSubmit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>现在代码有了一些改进，小T已经把校验的逻辑放到了validata函数中，但是formSubmit函数内部还要计算validata函数的返回值，因为返回值的表明了是否通过校验。接下来小T想通过AOP来优化这段代码，使validata函数和formSubmit函数完全分离开来，这里小T发现些不一样的地方，因为要先校验，如果校验不通过不能执行后面的ajax代码，小T决定对上面学习的AOP进行改写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforefn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(beforefn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// beforefn返回false，直接return，不在执行后面的原函数</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _self.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validata = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( username.value === <span class=\"string\">''</span> )&#123;</span><br><span class=\"line\">        alert ( <span class=\"string\">'用户名不能为空'</span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( password.value === <span class=\"string\">''</span> )&#123;</span><br><span class=\"line\">        alert ( <span class=\"string\">'密码不能为空'</span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> formSubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> param = &#123;</span><br><span class=\"line\">    username: username.value,</span><br><span class=\"line\">    password: password.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax( <span class=\"string\">'http:// xxx.com/login'</span>, param );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">formSubmit = formSubmit.before( validata );</span><br><span class=\"line\"></span><br><span class=\"line\">submitBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    formSubmit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>到这里，校验输入和提交表单的代码就完全分离开来，它们不在存在耦合关系，如同把校验规则动态接在formSubmit函数之前，validata成了一个即插即用的函数，它甚至可以写成配置文件的形式，非常有利于分开维护这两个函数。</p>\n<p>但是慢慢的小T也发现了用AOP装饰函数的一些缺点：因为函数通过Function.prototype.before和Function.prototype.after被装饰之后，返回的实际是一个新的函数，如果在原函数上保存了一些属性，那么这些属性会丢失：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func.a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">func = func.after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">alert(func.a); <span class=\"comment\">//输出undefined</span></span><br></pre></td></tr></table></div></figure>\n<p>除此之外，用AOP装饰方式也叠加了函数的作用域，如果装饰的链条过长，性能上也会受到一定的影响。</p>\n<h1 id=\"金风玉露一相逢\">金风玉露一相逢<a href=\"2018/10/23/js-higherOrderFn-DecoratorPatternToAOP2-md#金风玉露一相逢\"></a></h1><p>小T终于完成了用AOP装饰函数的学习旅程，短短三天，小T与AOP从素未谋面到彼此熟悉，最后相熟相知，小T终于可以用AOP融会贯通的处理日常一些分离代码功能提高代码复用性的任务。渐渐的小T也了解到了用AOP装饰函数方式的缺点，更加游刃有余的结合实际开发进行运用</p>\n<p><strong>人物与故事纯属虚构</strong></p>\n<h2 id=\"特别鸣谢\">特别鸣谢<a href=\"2018/10/23/js-higherOrderFn-DecoratorPatternToAOP2-md#特别鸣谢\"></a></h2><p>《JavaScript设计模式与开发实践》 -  AlloyTeam曾探</p>\n","prev":{"title":"清风扶桑，沉醉不得归途","link":"2018/11/06/life-aboutLife20181106"},"next":{"title":"用AOP装饰函数-摸索篇","link":"2018/10/18/js-higherOrderFn-DecoratorPatternToAOP1"},"plink":"//litten.me/2018/10/23/js-higherOrderFn-DecoratorPatternToAOP2-md/","copyright":{"custom":"123..."}}