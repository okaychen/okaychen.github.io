{"title":"过渡与动画 - 缓动效果之弹跳动画&弹性过渡","date":"2017-12-10T11:12:36.000Z","date_formatted":{"ll":"Dec 10, 2017","L":"12/10/2017","MM-DD":"12-10"},"link":"2017/12/10/css-animation-easing","tags":["CSS","animation"],"categories":["HTML/CSS"],"updated":"2018-09-21T10:37:15.000Z","content":"<h1 id=\"难题\">难题<a href=\"2017/12/10/css-animation-easing#难题\"></a></h1><p>给过渡和动画加上缓动效果是一种常见的手法（比如具有回弹效果的过渡过程）是一种流行的表现手法，可以让界面显得更加生动和真实：在现实世界中，物体A点到B点往往也是不完全匀速的</p>\n<p>以纯技术的角度来看，回弹效果是指当一个过渡达到最终值时，往回到一点，然后再次回到最终值，如此往复一次或者多次，并逐渐收敛，最终稳定在最终值。有相当的多JavaScript类库可以创建动画，且内置回弹效果等其他缓动效果。但是眼下，我们其实已经不需要借助脚本来实现过渡和动画了。不过，在CSS中实现回弹效果的最佳方式是什么呢？</p>\n<a id=\"more\"></a>\n<p><img src=\"http://www.chenqaq.com/assets/images/easingP.png\" alt=\"弹跳效果\" class=\"article-img\"></p>\n<h1 id=\"弹跳动画\">弹跳动画<a href=\"2017/12/10/css-animation-easing#弹跳动画\"></a></h1><p>我们的第一感觉可能就是使用css动画，并且设置如下关键帧：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> bounce&#123;</span><br><span class=\"line\">    60%,80%,<span class=\"selector-tag\">to</span>&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(350px);&#125;</span><br><span class=\"line\">    70%&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(250px);&#125;</span><br><span class=\"line\">    90%&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(300px);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>相信我们都做过这样的事，但是我们跑一遍这个动画，会发现它显示的及其不真实，主要原因在于，每当这个小球方向改变时，她得移动过程都是持续加速的，这看起来很不自然。<code>原因其实就是因为它的调速函数在关键帧的衔接都是一样的</code></p>\n<p>所有的过渡和动画之间都是跟一条曲线有关的，<code>这条曲线指定了动画过程在整段时间中是如何推进的</code>。</p>\n<p>如果不指定调速函数，就是得到一个默认值。但是这个<code>默认值</code>并不是我们想象中的匀速效果，而是：</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/easing2.png\" alt=\"默认值\" class=\"article-img\"></p>\n<p>注意，当时间进行到一半时，这个过渡已经推进到80%.</p>\n<p>说到<code>调速函数</code>,我们很自然联系到了css内置的缓动曲线和贝塞尔曲线。</p>\n<p>不论是在<code>animation/transition</code>简写属性中，还是在<code>animation-timing-function/transition-timing-function</code>展开属性中，你都可以把这个默认的调速函数显示指定<code>ease</code>关键字。除了ease外，还有四种内置的缓动曲线，你可以借助他们来改变动画的推进方式</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/easing-easeOut.png\" alt=\"ease-out\" class=\"article-img\"><br><img src=\"http://www.chenqaq.com/assets/images/easing-easeIn.png\" alt=\"ease-in\" class=\"article-img\"></p>\n<p><img src=\"http://www.chenqaq.com/assets/images/easing-easeInOut.png\" alt=\"ease-in-out\" class=\"article-img\"><br><img src=\"http://www.chenqaq.com/assets/images/easing3.png\" alt=\"linear\" class=\"article-img\"></p>\n<p>从上面四个图中，我们很直观的看出，<code>ease-out</code>是<code>ease-in</code>的反向版本。而这一对组合正是实现回弹效果所需要的：<code>每当小球的运动方向相反时，我们希望调速函数也是相反的</code>。我们希望小球下落是加速的<code>(ease-out)</code>,而弹起向上是减速的<code>(ease-in)</code>:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> bounce&#123;</span><br><span class=\"line\">    60%,80%,<span class=\"selector-tag\">to</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(400px);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>:ease-out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    70%&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(300px);&#125;</span><br><span class=\"line\">    90%&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(360px);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ball</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:bounce <span class=\"number\">3s</span> ease-in;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>虽然我们改动不大，但是已经发现回弹效果变得真实起来。不过显然这<code>五种内置的缓动曲线</code>是不够用的，假如我们这个回弹效果是用来模拟自由落体的，那么我们需要一个<code>更高的加速度</code>和ease的反向版本，又如何得到呢？</p>\n<p>其实所有的这五种曲线都是通过<code>(三次)贝塞尔曲线</code>来指定的，而CSS的调速函数都是<code>只有一个片段的贝塞尔曲线</code>，每个函数也只有两个控制锚点，CSS就提供了一个<code>cubic-bezier()</code>函数，允许我们指定自定义调速函数。他接受四个参数，分别是两个控制锚点的坐标值，<br><code>cubic-bezier(x1,y1,x2,y2)</code>，曲线的两个端点固定在(0,0)和(1,1)之间，前者是整个过渡的起点(时间进度0%，动画进度0%)而后者是整个过渡的终点(时间进度100%，动画进度100%)。</p>\n<p>举例来说，<code>ease</code>等同于<code>cubic-bezier(.25,.1,.25,1)</code>,因此它的反向版本就是<code>cubic-bezier(.1,.25,1,.25)</code></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> bounce&#123;</span><br><span class=\"line\">    60%,80%,<span class=\"selector-tag\">to</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(400px);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>:ease;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    70%&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(300PX);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    90%&#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(160px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.ball</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:bounce <span class=\"number\">3s</span> <span class=\"built_in\">cubic-bezier</span>(.1,.25,1,.25);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<iframe height=\"265\" scrolling=\"no\" title=\"css-animation-easing\" src=\"//codepen.io/okaychen/embed/xPveBP/?height=265&theme-id=dark&default-tab=css,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;margin-top:20px\">See the Pen <a href=\"https://codepen.io/okaychen/pen/xPveBP/\" target=\"_blank\" rel=\"noopener\">css-animation-easing</a> by okaychen (<a href=\"https://codepen.io/okaychen\" target=\"_blank\" rel=\"noopener\">@okaychen</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>我们可以借助<a href=\"http://cubic-bezier.com\" target=\"_blank\" rel=\"noopener\">cubic-bezier.com</a>的图形化工具，进行反复尝试和优化，从而进一步改写这个回弹动画.</p>\n<h2 id=\"最后\">最后<a href=\"2017/12/10/css-animation-easing#最后\"></a></h2><p>经过以上这些知识的学习储备和练习，相信我们已经可以做出很棒的弹跳动画了.<br>我们在文章开始放了一个小球弹跳的gif图效果，那么就让我们真真正正的动手来写一下吧！</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"POMgrv\" data-default-tab=\"css,result\" data-user=\"okaychen\" data-embed-version=\"2\" data-pen-title=\"css-animation-easing-practice\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/okaychen/pen/POMgrv/\" target=\"_blank\" rel=\"noopener\">css-animation-easing-practice</a> by okaychen (<a href=\"https://codepen.io/okaychen\" target=\"_blank\" rel=\"noopener\">@okaychen</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n<h1 id=\"弹性过渡\">弹性过渡<a href=\"2017/12/10/css-animation-easing#弹性过渡\"></a></h1><p>假设我们有一个文本输入框，每当它被聚焦时，都需要展示一个提示框<br>我们有如下结构：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    Your username:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"callout\"</span>&gt;</span>Only letters,numbers,usrescore(_) and hyphens (-) allowed!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>每当用户聚焦这个文本输入框时，都会有一个半秒钟的过渡，可能我们会完成这样的代码</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span> + <span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>:.<span class=\"number\">5s</span> transform;</span><br><span class=\"line\">    <span class=\"attribute\">transition-origin</span>:<span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个过渡没有任何问题，但是我们希望它在结尾时能在夸张一点话，显得更加自然生动，我们可能会把这个过渡改为一个动画，然后用上面提到的缓动曲线</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> elastic-grow&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(0);&#125;</span><br><span class=\"line\">    70% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(1.1);</span><br><span class=\"line\">        <span class=\"attribute\">animation-timing-function</span>:<span class=\"built_in\">cubic-bezier</span>(.1,.25,1,.25);   <span class=\"comment\">/*反向的ease*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span> + <span class=\"selector-class\">.callout</span>&#123; <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(0); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span> + <span class=\"selector-class\">.callout</span>&#123; <span class=\"attribute\">animation</span>:elastic-grow .<span class=\"number\">5s</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.callout</span>&#123; <span class=\"attribute\">transform-origin</span>:<span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>; &#125;</span><br></pre></td></tr></table></div></figure>\n<p>添加了这个动画之后，确实发挥了作用。不过这里我们其实只是需要一个过渡而已，而我们本质上却使用了一个动画，显得有些大材小用，有一种杀鸡用牛刀的感觉，我们如何只用过渡完成这个效果呢？</p>\n<p>这里我们就用到了上面说起的调速函数<code>cubic-bezier()</code>，在这个例子中，我们希望调速函数先到达110%的程度(相当于<code>scale(1.1)</code>)，然后在过渡回100%，我们把控制锚点向上移，</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/Tankease.png\" alt=\"cubic-bezier(.25,.1,.3,1.5)\" class=\"article-img\"></p>\n<p>这个自定义调速函数在垂直坐标上已经超出0~1的区间，最终又回到1，在70%的时间点到达了110%的变形程度的高峰，然后继续用剩下30%的时间回到它的最终值</p>\n<p>整个过渡的推进，非常接近前面的动画方案，但他仅需要一行代码就可以实现整个效果</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span> + <span class=\"selector-class\">.callout</span>&#123; <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(0) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>:<span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>:.<span class=\"number\">5s</span> <span class=\"built_in\">cubic-bezier</span>(.25,.1,.3,1.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"http://www.chenqaq.com/assets/images/Tankbug.png\" alt=\"cubic-bezier(.25,.1,.3,1.5)\" class=\"article-img\"></p>\n<p>but,wait…当提示框收缩时，左下角出现的是什么？其实，当我们把焦点从输入框切出去的时候，所触发的过渡会以<code>scale(1)</code>作为起始值，并以<code>scale(0)</code>作为最终值，这个过渡仍然会在350ms后到达110%的变形程度。只不过在这里，110%的变形程度的解析结果并不是<code>scale(1.1)</code>,而是scale<code>(-0.1)</code></p>\n<p>我们可以定义关闭状态的css规则(假如我们指定普通的ease调速函数)把当前的调速函数覆盖掉</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span> + <span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">transition-timing-function</span>:ease;   <span class=\"comment\">/*覆盖cubic-bezier*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>:<span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>:.<span class=\"number\">5s</span> <span class=\"built_in\">cubic-bezier</span>(.25,.1,.3,1.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>再试一试，发现已经关闭提示框已经恢复到我们设置<code>cubic-bezier()</code>之前的样子了，</p>\n<p>但是其实我们仔细观察发现另一个问题：<code>提示框的关闭动作明显要迟钝一些。</code>我们细细想来发现，在提示框展开过程中，当时间为50%(250ms)时，它就已经到达100%的尺寸效果了。但是在收缩过程中，从0%~100%的变化会花费我们为过渡所指定的素有时间(500ms),因此感觉会慢上一般</p>\n<p>然后我们会想到同时覆盖过渡的持续时间：可以用<code>transition-duration</code>这一属性，也可以用<code>transition</code>这个简写属性来覆盖所有值，如果选择后者的话就不需要指定ease了，因为他本来就是<code>transition</code>的初始值:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span> + <span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>:.<span class=\"number\">25s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform-origin</span>:<span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>:.<span class=\"number\">5s</span> <span class=\"built_in\">cubic-bezier</span>(.25,.1,.3,1.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<iframe height=\"265\" scrolling=\"no\" title=\"css-animation-task\" src=\"//codepen.io/okaychen/embed/VywaXV/?height=265&theme-id=dark&default-tab=css,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;margin-top:20px\">See the Pen <a href=\"https://codepen.io/okaychen/pen/VywaXV/\" target=\"_blank\" rel=\"noopener\">css-animation-task</a> by okaychen (<a href=\"https://codepen.io/okaychen\" target=\"_blank\" rel=\"noopener\">@okaychen</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<h2 id=\"最后-1\">最后<a href=\"2017/12/10/css-animation-easing#最后-1\"></a></h2><p>虽然弹性过渡在很多过渡中都可以收到不错的效果，但是某些时候<code>他产生的效果可能相当糟糕</code>。典型的<code>反面案例</code>出现在对<code>颜色属性</code>的弹性过渡中。尽管颜色发生弹性过渡可能非常有趣，但这种效果在UI场景中通常是不合适的.</p>\n<p>为了避免不小心对颜色设置了弹性过渡，可以尝试把<code>过渡的作用范围限制在某几种特定的属性上</code>，transition不指定时，<code>transition-property</code>就会得到它的初始值：<code>all</code>，这意味着只要是过渡的属性都会参与过渡。我们可以在<code>transition</code>中设置<code>transform</code></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:focus)</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>:.<span class=\"number\">25s</span> transform;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.callout</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition-origin</span>:<span class=\"number\">1.4em</span> -.<span class=\"number\">4em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>:.<span class=\"number\">5s</span> <span class=\"built_in\">cubic-bezier</span>(.25,.1,.3,1.5) transform;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n<p>参考资料</p>\n<ul>\n<li><p><a href=\"https://book.douban.com/subject/26295140/\" target=\"_blank\" rel=\"noopener\">《CSS Secrets 》</a></p>\n</li>\n<li><p><a href=\"http://easings.net/zh-cn\" target=\"_blank\" rel=\"noopener\">http://w3.org/TR/css-animations</a></p>\n</li>\n<li><p><a href=\"http://easings.net/zh-cn\" target=\"_blank\" rel=\"noopener\">http://cubic-bezier.com</a></p>\n</li>\n<li><p><a href=\"http://easings.net/zh-cn\" target=\"_blank\" rel=\"noopener\">understand css cubic-bezier</a></p>\n</li>\n</ul>\n","prev":{"title":"过渡与动画 - steps调速函数&CSS值与单位之ch","link":"2017/12/13/css-animation-frameBYframe"},"next":{"title":"css标准盒模型、怪异模式&&box-sizing属性","link":"2017/12/09/css-box-model"},"plink":"//litten.me/2017/12/10/css-animation-easing/","toc":[{"title":"难题","id":"难题","index":"1"},{"title":"弹跳动画","id":"弹跳动画","index":"2","children":[{"title":"最后","id":"最后","index":"2.1"}]},{"title":"弹性过渡","id":"弹性过渡","index":"3","children":[{"title":"最后","id":"最后-1","index":"3.1"}]}]}