{"title":"Express4.x API (三)：Response (译)","date":"2017-12-21T12:32:44.000Z","date_formatted":{"ll":"Dec 21, 2017","L":"12/21/2017","MM-DD":"12-21"},"link":"2017/12/21/express-api-cn-response","tags":["express","node"],"categories":["Node"],"updated":"2018-09-21T10:36:49.000Z","content":"<h1 id=\"Express4-x-API-译文-系列文章\">Express4.x API 译文 系列文章<a href=\"2017/12/21/express-api-cn-response#Express4-x-API-译文-系列文章\"></a></h1><ul>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8108405.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (一)：application (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8081275.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (二)：request (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8087425.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (三)：Response (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8093717.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (四)：router (译) – 完成</a></li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Response\">Response<a href=\"2017/12/21/express-api-cn-response#Response\"></a></h1><p><code>res</code>对象表示一个Express应用程序在收到HTTP请求时发送的HTTP响应(response)</p>\n<p>在这篇文档和惯例中，HTTP响应这个对象总是被称为<code>res</code>(HTTP请求则是req)，但是它的实际名称取决于您正在工作的回调函数的参数.</p>\n<p>举个栗子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'user'</span> + req.params.id)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>当然你也可以这样：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>)</span>&#123;</span><br><span class=\"line\">    response.send(<span class=\"string\">'user'</span> + request.params.id)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"Properties\">Properties<a href=\"2017/12/21/express-api-cn-response#Properties\"></a></h2><h3 id=\"res-app\">res.app<a href=\"2017/12/21/express-api-cn-response#res-app\"></a></h3><p>此属性持有对使用中间件Express应用实例的引用</p>\n<p><code>res.app</code>和在request对象中的<code>req.app</code>属性是完全相同的</p>\n<h3 id=\"res-headersSent\">res.headersSent<a href=\"2017/12/21/express-api-cn-response#res-headersSent\"></a></h3><p>布尔属性，表示这个app是否发送了HTTP头进行响应</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.headersSend);  <span class=\"comment\">// false</span></span><br><span class=\"line\">    res.send(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.headersSend); <span class=\"comment\">// true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"res-locals\">res.locals<a href=\"2017/12/21/express-api-cn-response#res-locals\"></a></h3><p>一个对象包含局部变量作用域的请求的响应，因此只能用于在request/response周期中呈现的视图(如果有的话)。否者，此属性与app.locals是相同的</p>\n<p>此属性用于公开<code>request-level</code>信息，例如请求的路径名(path name)，经过身份认证的用户(authenticated user),用户设置(user setting)等等</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    res.locals.user = req.user;</span><br><span class=\"line\">    req.locals.authenticated = !req.user.anonymous;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"Methods\">Methods<a href=\"2017/12/21/express-api-cn-response#Methods\"></a></h2><h3 id=\"res-append-field-value\">res.append(field[,value])<a href=\"2017/12/21/express-api-cn-response#res-append-field-value\"></a></h3><blockquote>\n<p>res.append在Expressv4.11.0+是支持的</p>\n</blockquote>\n<p>将指定的值到http响应头字段.如果header还没有被设置，它创建具有指定值的头文件，<code>value</code>参数可以是字符串或数组</p>\n<p>如果<code>res.set()</code>在<code>res.append()</code>之后的话将会重置以前设置的header头</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.append(<span class=\"string\">'Link'</span>,[<span class=\"string\">'&lt;http://localhost/&gt;'</span>,<span class=\"string\">'&lt;http://localhost:3000/&gt;'</span>])</span><br><span class=\"line\">res.append(<span class=\"string\">'Set-Cookie'</span>,<span class=\"string\">'foo=bar;path=/;HttpOnly'</span>)</span><br><span class=\"line\">res.append(<span class=\"string\">'Warning'</span>,<span class=\"string\">'199 Miscellaneous warning'</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-attachment-filename\">res.attachment([filename])<a href=\"2017/12/21/express-api-cn-response#res-attachment-filename\"></a></h3><p>使用<code>attchment</code>设置HTTP响应<code>Content-Dispositon</code>头字段.如果给了一个文件名<code>filename</code>，然后基于扩展名通过<code>res.type()</code>设置<code>Content-Type</code>,并设置<code>Content-Disposition</code>“fliename=”参数</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.attachment();</span><br><span class=\"line\"><span class=\"comment\">// Content-Disposition:attachment</span></span><br><span class=\"line\"></span><br><span class=\"line\">res.attachment(<span class=\"string\">'path/to/logo.png'</span>);</span><br><span class=\"line\"><span class=\"comment\">// Content-Disposition:attachment;filename='logo.png'</span></span><br><span class=\"line\"><span class=\"comment\">// Content-Type:image/png</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-cookie-name-value-options\">res.cookie(name,value[,options])<a href=\"2017/12/21/express-api-cn-response#res-cookie-name-value-options\"></a></h3><p>给cookie名称设置值，<code>value</code>参数可以是一个字符串或者是对象转化为JSON，options参数可以是具有以下属性的对象</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>domain</td>\n<td>String</td>\n<td>cookie的域名，默认应用程序的域名</td>\n</tr>\n<tr>\n<td>expires</td>\n<td>Date</td>\n<td>格林尼治时间内cookie的到期日期，如果没有指明或设置为0，创建会话cookie</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>Boolean</td>\n<td>标志cookie只能由web服务器访问</td>\n</tr>\n<tr>\n<td>maxAge</td>\n<td>String</td>\n<td>在毫秒内设置相对于当前时间的方便选项</td>\n</tr>\n<tr>\n<td>path</td>\n<td>String</td>\n<td>cookie的路径，默认为’/‘</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>Boolean</td>\n<td>标记只于https一起使用的cookie</td>\n</tr>\n<tr>\n<td>signed</td>\n<td>Boolean</td>\n<td>指示cookie是否被签署</td>\n</tr>\n</tbody></table></div></div>\n<blockquote>\n<p>提供带有选项设置的HTTP <code>Set-Cookie``res.cookie</code>起作用，未指定的任何选项默认值为<a href=\"http://tools.ietf.org/html/rfc6265\" target=\"_blank\" rel=\"noopener\">RFC 6265</a></p>\n</blockquote>\n<p>举个栗子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">'name'</span>,<span class=\"string\">'tobi'</span>,&#123;<span class=\"attr\">domain</span>:<span class=\"string\">'example.com'</span>,<span class=\"attr\">path</span>:<span class=\"string\">'/admin'</span>,<span class=\"attr\">secure</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">res.cookie(<span class=\"string\">'rememberme'</span>,<span class=\"string\">'1'</span>,&#123;<span class=\"attr\">expires</span>:<span class=\"string\">'new Dtae(Date.now() + 900000),httpOnly：true'</span>&#125;)</span><br></pre></td></tr></table></div></figure>\n<p><code>maxAge</code>选项是以当前时间为起点以毫秒为单位设置<code>expires</code>的便捷选项，下面这个栗子相当于上面例子中的第二个</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">'rememberme'</span>,<span class=\"string\">'1'</span>,&#123;<span class=\"attr\">maxAge</span>:<span class=\"number\">900000</span>,<span class=\"attr\">httpOnly</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>你可以传递一个对象给<code>value</code>参数,然后通过<code>bodyparser</code>中间件将其序列化为JSON</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">'cart'</span>,&#123;<span class=\"attr\">items</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;)</span><br><span class=\"line\">res.cookie(<span class=\"string\">'cart'</span>,&#123;<span class=\"attr\">items</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;,&#123;<span class=\"attr\">maxAge</span>:<span class=\"number\">900000</span>&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>当使用<code>cookie-parser</code>中间件时，此方法还支持签署cookie，只需要设置<code>signed</code>选项为true。然后<code>res.cookie()</code>将会秘密的传递给<code>cookieParser(secret)</code>去签署这个值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">'name'</span>,<span class=\"string\">'tobi'</span>,&#123;<span class=\"attr\">signed</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>然后你可以通过<code>req.signedCookie()</code>访问此值</p>\n<h3 id=\"res-clearCookie-name-options\">res.clearCookie(name,[,options])<a href=\"2017/12/21/express-api-cn-response#res-clearCookie-name-options\"></a></h3><p>通过cookie名称清除指定的cookie</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">'rememberme'</span>,<span class=\"string\">'tobi'</span>,&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/admin'</span>&#125;);</span><br><span class=\"line\">res.clearCookie(<span class=\"string\">'rememberme'</span>,&#123;<span class=\"attr\">path</span>:<span class=\"string\">'/admin'</span>&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-download-path-fliename-fn\">res.download(path,[,fliename][,fn])<a href=\"2017/12/21/express-api-cn-response#res-download-path-fliename-fn\"></a></h3><p>将路径中文件作为<code>附件(attachment)</code>传输.通常，浏览器将提示用户下载.默认情况下，<code>Content-Disposition</code>头中”filename=”参数是路径（这通常出现在浏览器对话框），用<code>filename</code>参数覆盖默认值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.download(<span class=\"string\">'/report-12345.pdf'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">res.download(<span class=\"string\">'/report-12345.pdf'</span>,<span class=\"string\">'report.pdf'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">res.download(<span class=\"string\">'/report-12345.pdf'</span>,<span class=\"string\">'report.pdf'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理错误，但是请记得响应可能是部分发送的</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以检查`res.headerssent`</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 减量下载，等</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-end-data-encoding\">res.end([data][,encoding])<a href=\"2017/12/21/express-api-cn-response#res-end-data-encoding\"></a></h3><p>结束响应进程，This method actually comes from Node core, specifically the <a href=\"https://nodejs.org/api/http.html#http_response_end_data_encoding_callback\" target=\"_blank\" rel=\"noopener\">response.end() method of http.ServerResponse</a>.（这句话翻译过来我有些不理解，我就不再翻译，res.end用于结束响应）</p>\n<p>快速结束响应而无需任何数据，如果你需要对数据进行响应，取而代之的是使用诸如<code>res.send</code>和<code>res.json</code></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.send();</span><br><span class=\"line\">res.status(<span class=\"number\">404</span>).end();</span><br></pre></td></tr></table></div></figure>\n\n\n<h3 id=\"res-format-object\">res.format(object)<a href=\"2017/12/21/express-api-cn-response#res-format-object\"></a></h3><p>在请求对象时，在<code>Accept</code>HTTP头对象上执行<code>content-negotiation</code>。他使用<code>req.accepts</code>基于可接受的质量值的有序类型为请求选择一个处理程序，如果header未指定，调用第一个回调函数.当没有找到匹配项，服务器响应406<code>Not Acceptable</code>或调用默认回调函数</p>\n<p>当选择回调时，将设置<code>Content-Type</code>响应头.然而你可以使用回调方法在回调中更改此值例如：<code>res.set</code>或者<code>res.type</code></p>\n<p>下面这个例子当<code>Accept</code>头域设置为<code>applocation/json</code>或者<code>*/json</code>时，将会响应{‘message’:’hey’}(然而如果是”<em>/</em>“,响应将会是’hey’)</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.format(&#123;</span><br><span class=\"line\">    <span class=\"string\">'text/plain'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        res.send(<span class=\"string\">'hey'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'text/html'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        res.send(<span class=\"string\">'&lt;p&gt;hey&lt;/p&gt;'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'applaction/json'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        res.send(message:<span class=\"string\">'hey'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'default'</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录请求并用406响应</span></span><br><span class=\"line\">        res.status(<span class=\"number\">406</span>).send(<span class=\"string\">'Not Acceptable'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>除了规范化MOME类型，对于稍微不太详细的实现你还可以使用扩展名映射到这些类型</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.format(&#123;</span><br><span class=\"line\">    text:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        res.send(<span class=\"string\">'hey'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    html:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        res.send(<span class=\"string\">'&lt;p&gt;hey&lt;/p&gt;'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    json:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        res.send(&#123;<span class=\"attr\">message</span>:<span class=\"string\">'hey'</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-get-field\">res.get(field)<a href=\"2017/12/21/express-api-cn-response#res-get-field\"></a></h3><p>返回由路由字段指定的http响应头(对大小写是不敏感的)</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.get(<span class=\"string\">'Content-Tpye'</span>);  <span class=\"comment\">// =&gt; 'text/plain'</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-json-body\">res.json([body])<a href=\"2017/12/21/express-api-cn-response#res-json-body\"></a></h3><p>发送一个JSON响应，这个方法和<code>res.send</code>是一样的传递一个对象或者数组作为参数.但是你可以使用它将其他值转化为JSON,例如null，undefined（虽然这些在技术上不是有效的JSON）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.json(<span class=\"literal\">null</span>)</span><br><span class=\"line\">res.json(user:<span class=\"string\">'tobi'</span>)</span><br><span class=\"line\">res.status(<span class=\"number\">500</span>).json(error:<span class=\"string\">'message'</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-jsonp-body\">res.jsonp([body])<a href=\"2017/12/21/express-api-cn-response#res-jsonp-body\"></a></h3><p>发送一个JSONP支持的JSON响应，这个方法和<code>req.json()</code>是相同的,除了他选择在JSONP的回调支持</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.jsonp(<span class=\"literal\">null</span>) <span class=\"comment\">// =&gt; null</span></span><br><span class=\"line\"></span><br><span class=\"line\">res.jsonp(&#123;<span class=\"attr\">user</span>:<span class=\"string\">'tobi'</span>&#125;)  <span class=\"comment\">// =&gt; &#123;\"user\":\"tobi\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">res.status(<span class=\"number\">500</span>).jsonp(&#123;<span class=\"attr\">error</span>:<span class=\"string\">'message'</span>&#125;)  <span class=\"comment\">// =&gt; &#123;\"error\":\"message\"&#125;</span></span><br></pre></td></tr></table></div></figure>\n<p>以下是一些JSONP响应用相同的代码的栗子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ?callback=foo</span></span><br><span class=\"line\">res.jsonp(user:<span class=\"string\">\"tobi\"</span>)  <span class=\"comment\">// =&gt; foo(&#123;\"user\":\"tobi\"&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.set(<span class=\"string\">'JSONP callback name '</span>,<span class=\"string\">'cb'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ?cb=foo</span></span><br><span class=\"line\">res.status(<span class=\"number\">500</span>).jsonp(&#123;<span class=\"attr\">error</span>:<span class=\"string\">'message'</span>&#125;)  <span class=\"comment\">// =&gt; foo(&#123;\"error\":\"message\"&#125;)</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-links-links\">res.links(links)<a href=\"2017/12/21/express-api-cn-response#res-links-links\"></a></h3><p>将提供的链接作为参数的属性添加到响应的<code>Link</code> HTTP 头字段</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.links(&#123;</span><br><span class=\"line\">    next:<span class=\"string\">'http://api.example.com/user?page=2'</span>,</span><br><span class=\"line\">    last:<span class=\"string\">'http://api.example.com/user?page=5'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>产出</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Link:</span>&lt;<span class=\"symbol\">http:</span>/<span class=\"regexp\">/api.example.com/user</span>?page=<span class=\"number\">2</span>&gt;; rel=<span class=\"string\">'next'</span></span><br><span class=\"line\">    <span class=\"symbol\">:&lt;http</span><span class=\"symbol\">://api</span>.example.com/user?page=<span class=\"number\">5</span>&gt;; rel=<span class=\"string\">'last'</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-location-path\">res.location(path)<a href=\"2017/12/21/express-api-cn-response#res-location-path\"></a></h3><p>设置响应<code>location</code>HTTP头为指定的path路径参数</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">res</span><span class=\"selector-class\">.location</span>(<span class=\"string\">'/foo/bar'</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">res</span><span class=\"selector-class\">.location</span>(<span class=\"string\">'http://example.com'</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">res</span><span class=\"selector-class\">.location</span>(<span class=\"string\">'back'</span>);</span><br></pre></td></tr></table></div></figure>\n<p>带有<code>back</code>参数的的路径带有特殊的意义，它指的是在请求的<code>Referer</code>报头指定的URL，如果没有被指定，它指向”/“</p>\n<h3 id=\"res-redirect-status-path\">res.redirect([status,] path)<a href=\"2017/12/21/express-api-cn-response#res-redirect-status-path\"></a></h3><p>重定向URL来自指定的路径，使用指定的HTTP状态码.如果没有指定状态，状态代码默认为’302 Found’</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.redirect(<span class=\"string\">'/foo/bar'</span>);</span><br><span class=\"line\">res.redirect(<span class=\"string\">'http://example.com'</span>);</span><br><span class=\"line\">res.redirect(<span class=\"number\">301</span>,<span class=\"string\">'http://example.com'</span>);</span><br><span class=\"line\">res.redirect(<span class=\"string\">'../login'</span>);</span><br></pre></td></tr></table></div></figure>\n<p>重定向可以完全的将URL重定向到另一个不同的网站</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.redirect(<span class=\"string\">'http://google.com'</span>);</span><br></pre></td></tr></table></div></figure>\n<p>重定向可以使用相对主机的路径，例如，如果你的应用程序是”<a href=\"http://example.com/admin/post/new&quot;，下面将会将它重定向到&quot;http://example.com/admin&quot;\" target=\"_blank\" rel=\"noopener\">http://example.com/admin/post/new&quot;，下面将会将它重定向到&quot;http://example.com/admin&quot;</a></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.redirect(<span class=\"string\">'/admin'</span>)</span><br></pre></td></tr></table></div></figure>\n<p>重定向可以相对于当前的URL，例如来自”<a href=\"http://example.com/blog/admin/&quot;(注意最后的尾斜杠)，下面将重定向到&quot;http://example.com/blog/admin/post/new&quot;\" target=\"_blank\" rel=\"noopener\">http://example.com/blog/admin/&quot;(注意最后的尾斜杠)，下面将重定向到&quot;http://example.com/blog/admin/post/new&quot;</a></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.redirect(<span class=\"string\">'post/new'</span>)</span><br></pre></td></tr></table></div></figure>\n<p>如果上面admin最后没有尾斜杠，将会重定向至”<a href=\"http://example.com/blog/post/new&quot;\" target=\"_blank\" rel=\"noopener\">http://example.com/blog/post/new&quot;</a></p>\n<blockquote>\n<p>如果你发现上述行为令人困惑，把路径段看做目录（尾随斜杠）和文件，他将开始变得有意义</p>\n</blockquote>\n<p>相对路径的重定向也是有可能的，如果你是”<a href=\"http://example.com/admin/post/new&quot;,下面将会重定向到&quot;http://example.com/admin/post&quot;\" target=\"_blank\" rel=\"noopener\">http://example.com/admin/post/new&quot;,下面将会重定向到&quot;http://example.com/admin/post&quot;</a></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.redirect(<span class=\"string\">'..'</span>);</span><br></pre></td></tr></table></div></figure>\n<p>一个<code>back</code>重定向到请求返回<code>referer</code>，如果<code>referer</code>丢失默认为’/‘</p>\n<h3 id=\"res-render-view-locals-callback\">res.render(view[,locals][,callback])<a href=\"2017/12/21/express-api-cn-response#res-render-view-locals-callback\"></a></h3><p>呈现视图并将HTML发送给客户端，可选参数：</p>\n<ul>\n<li>locals,属性定义视图的局部变量的对象</li>\n<li>callback,回调函数，如果提供的话，返回可能的错误和呈现的字符串，但并不自动响应.当错误发生时,该方法在内部调用<code>next(err)</code><figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">'index'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">res.render(<span class=\"string\">'index'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,html</span>)</span>&#123;</span><br><span class=\"line\">    res.send(html)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将局部变量传递给视图</span></span><br><span class=\"line\">res.render(<span class=\"string\">'user'</span>,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'tobi'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,html</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<h3 id=\"res-send-body\">res.send([body])<a href=\"2017/12/21/express-api-cn-response#res-send-body\"></a></h3><p>发送http响应<br><code>body</code>参数可以是一个<code>buffer</code>对象，字符串，对象，数组.举个栗子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.send(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">'whoop'</span>))</span><br><span class=\"line\">res.send(&#123;<span class=\"attr\">some</span>:<span class=\"string\">'json'</span>&#125;)</span><br><span class=\"line\">res.send(<span class=\"string\">'&lt;p&gt;some html&lt;/p&gt;'</span>)</span><br><span class=\"line\">res.status(<span class=\"number\">404</span>).send(<span class=\"string\">'sorry,er can not find that!'</span>)</span><br><span class=\"line\">res.status(<span class=\"number\">500</span>).send(&#123;<span class=\"attr\">error</span>:<span class=\"string\">'something brew up'</span>&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>当参数是一个buffer对象时，该方法设置<code>Content-Type</code>响应头字段为<code>application/octet-stream</code>，除非先定义如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.set(<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/html'</span>)</span><br><span class=\"line\">res.send(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">'&lt;p&gt;some html&lt;/p&gt;'</span>))</span><br></pre></td></tr></table></div></figure>\n<p>当参数为字符串时，这个方法设置’Content-Type’为’text/html’</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.send(<span class=\"string\">'&lt;p&gt;some html&lt;/p&gt;'</span>)</span><br></pre></td></tr></table></div></figure>\n<p>当参数为数组或者对象时，Express用JSON表示响应</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.send(&#123;<span class=\"attr\">user</span>:<span class=\"string\">'tobi'</span>&#125;)</span><br><span class=\"line\">res.send([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-sendFile-path-options-fn\">res.sendFile(path[,options][,fn])<a href=\"2017/12/21/express-api-cn-response#res-sendFile-path-options-fn\"></a></h3><blockquote>\n<p>res.sendFile()在Express v4.8.0之前被支持</p>\n</blockquote>\n<p>在给定路径上传输文件，根据文件的扩展设置”Content-Tpye”响应HTTP头字段.除非在选项对象中设置根选项，路径必须是文件的绝对路径</p>\n<p>下表中列出了选项对象中的详细信息</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Default</th>\n<th>Availability</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>maxAge</td>\n<td>以毫秒为单位设置max-age缓存控制头或者MS格式的字符串</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>root</td>\n<td>相关文件的根目录</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>lastModified</td>\n<td>设置last-modified头设置为操作系统上文件的最后修改日期，设置false禁用它</td>\n<td>Enabled</td>\n<td>4.9.0+</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>包含与文件服务对象的HTTP头</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>dotfiles</td>\n<td>可能值为”allow”,”deny”,”ignore”</td>\n<td>“ignore”</td>\n<td></td>\n</tr>\n</tbody></table></div></div>\n<p>该方法调用一个回调函数<code>fn(err)</code>当传输完成或发生错误时.如果指定了回调函数并发生错误时，回调函数必须通过终止请求响应周期来显式地处理响应过程，或者传递控制给下一个路由</p>\n<p>下面这个栗子使用了<code>res.sendFile()</code>的所有参数</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.send(<span class=\"string\">'/file/:name'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options=&#123;</span><br><span class=\"line\">        root:__dirname+<span class=\"string\">'/public'</span>,</span><br><span class=\"line\">        dotfiles:<span class=\"string\">'deny'</span>,</span><br><span class=\"line\">        headers:&#123;</span><br><span class=\"line\">            <span class=\"string\">'x-timestamp'</span>:<span class=\"built_in\">Date</span>.now(),</span><br><span class=\"line\">            <span class=\"string\">'x-sent'</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flieName = req.params.name;</span><br><span class=\"line\">    res.sendFile(fileName,options,funcion(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">            res.status(err.status).end();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Sent:'</span>, fileName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>res.sendFile()在下面的例子中，提供对文件服务的<code>fine-grained</code>支持，</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/user/:uid/photos/:file'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uid = req.params.uid;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = req.params.file;</span><br><span class=\"line\"></span><br><span class=\"line\">    req.user.mayViewFilesFrom(uid,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">yes</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(yes)&#123;</span><br><span class=\"line\">            res.sendFile(<span class=\"string\">'/uploads/'</span> + uid + <span class=\"string\">'/'</span> + file);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.status(<span class=\"number\">403</span>).send(<span class=\"string\">\"sorry you cant\\'s see that.\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-sendStatus-statusCode\">res.sendStatus(statusCode)<a href=\"2017/12/21/express-api-cn-response#res-sendStatus-statusCode\"></a></h3><p>设置响应的HTTP状态码并将字符串形式作为响应体发送</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.sendStatus(<span class=\"number\">200</span>);  <span class=\"comment\">// 等于 res.status(200).send('ok')</span></span><br><span class=\"line\">res.sendStatus(<span class=\"number\">403</span>);  <span class=\"comment\">// 等于 res.status(403).send('Forbidden')</span></span><br><span class=\"line\">res.sendStatus(<span class=\"number\">404</span>);  <span class=\"comment\">// 等于 res.status(404).send('Not Found')</span></span><br><span class=\"line\">res.sendStatus(<span class=\"number\">500</span>);  <span class=\"comment\">// 等于 res.status(500).send('Internal Server Error')</span></span><br></pre></td></tr></table></div></figure>\n<p>如果指定了不受支持的状态代码，HTTP状态仍然设置状态码和代码的字符串版本为响应正文中发送</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.sendStatus(<span class=\"number\">2000</span>)  <span class=\"comment\">// 等于 res.status(2000).send('2000')</span></span><br></pre></td></tr></table></div></figure>\n<p><a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" target=\"_blank\" rel=\"noopener\">More about HTTP Status Codes</a></p>\n<h3 id=\"res-set-field-value\">res.set(field [,value])<a href=\"2017/12/21/express-api-cn-response#res-set-field-value\"></a></h3><p>将HTTP响应头filed设置为value值.立即设置多个字段，传递一个对象作为参数</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.set(<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">res.set(&#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text.plain'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Content-Length'</span>:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">    <span class=\"string\">'ETag'</span>:<span class=\"string\">'12345'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>别名为<code>res.header(field[,value])</code></p>\n<h3 id=\"res-status-code\">res.status(code)<a href=\"2017/12/21/express-api-cn-response#res-status-code\"></a></h3><p>使用此方法为响应设置HTTP状态，这是一个连贯性的Node <code>response.statusCode</code>别名</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.status(<span class=\"number\">403</span>).send();</span><br><span class=\"line\">res.status(<span class=\"number\">400</span>).send(<span class=\"string\">'Bad Request'</span>);</span><br><span class=\"line\">res.status(<span class=\"number\">404</span>).sendFile(<span class=\"string\">'/absolute/path/to/404.png'</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-type-type\">res.type(type)<a href=\"2017/12/21/express-api-cn-response#res-type-type\"></a></h3><p>将<code>Content-Type</code>的HTTP头设置为<code>MIME</code>类型,通过<code>mime.lookup</code>指定类型.如果类型包含’/‘字符，设置”Content-Type”为’type’</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.type(<span class=\"string\">'.html'</span>)  <span class=\"comment\">// =&gt; 'text/html'</span></span><br><span class=\"line\">res.type(<span class=\"string\">'html'</span>)  <span class=\"comment\">// =&gt;'text/html'</span></span><br><span class=\"line\">res.type(<span class=\"string\">'json'</span>) <span class=\"comment\">// =&gt; 'application/json'</span></span><br><span class=\"line\">res.type(<span class=\"string\">'application/json'</span>)  <span class=\"comment\">// =&gt; 'application/json'</span></span><br><span class=\"line\">res.type(<span class=\"string\">'png'</span>) <span class=\"comment\">// =&gt; image/png:</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"res-vary-field\">res.vary(field)<a href=\"2017/12/21/express-api-cn-response#res-vary-field\"></a></h3><p>如果它不在那里，添加字段到<code>vary</code>响应头</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">res.vary(<span class=\"string\">'User-Agent'</span>).render(<span class=\"string\">'docs'</span>);</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"写在后面\">写在后面<a href=\"2017/12/21/express-api-cn-response#写在后面\"></a></h1><p>Express文档中Response部分就完成了，本人学识有限，难免有所纰漏，另外翻译仅仅是方便个人学习交流使用，无其他用意，原文地址：<a href=\"http://www.expressjs.com.cn/4x/api.html#res\" target=\"_blank\" rel=\"noopener\">expressjs.com</a></p>\n","prev":{"title":"Express4.x API (四)：Router (译)","link":"2017/12/23/express-api-cn-router"},"next":{"title":"Express4.x API (二)：Request (译)","link":"2017/12/20/epxress-api-cn-request"},"plink":"//litten.me/2017/12/21/express-api-cn-response/","copyright":{"custom":"123..."}}