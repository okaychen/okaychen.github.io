{"per_page":10,"total":3,"current":2,"data":[{"title":"跟着underscore学习防抖和节流","date":"2018-03-20T07:54:44.000Z","date_formatted":{"ll":"Mar 20, 2018","L":"03/20/2018","MM-DD":"03-20"},"excerpt":"<h1 id=\"有个开始吧！\">有个开始吧！<a href=\"2018/03/20/js-debounce-throttle#有个开始吧！\"></a></h1><p>网上有很多的防抖与节流的文章，自己也早有耳闻，之前看underscore的代码，也发现了两个与众不同的函数debounce和throttle，仿佛是有特定的用途。学习实践之后便总结下这篇文章。</p>","link":"2018/03/20/js-debounce-throttle","tags":["underscore","防抖与节流"],"categories":["JavaScript"]},{"title":"浏览器同源政策","date":"2018-03-15T02:51:07.000Z","date_formatted":{"ll":"Mar 15, 2018","L":"03/15/2018","MM-DD":"03-15"},"excerpt":"<p>我们都知道浏览器的“同源政策”是浏览器安全的基石，根本目的是为了保护用户信息安全，防止恶意的网站窃取数据。<br>1995年，同源政策由Netscape 公司引入。目前，所有浏览器都执行这个政策。</p>","link":"2018/03/15/cross-domain-cors","tags":["同源政策","跨域"],"categories":["HTML/CSS"]},{"title":"拥抱未来的布局方式","date":"2018-03-07T09:41:18.000Z","date_formatted":{"ll":"Mar 7, 2018","L":"03/07/2018","MM-DD":"03-07"},"excerpt":"<p>相比传统的布局方式，flex 和 grid 使布局系统简化，轻松的解决了复杂的 web 布局。<br>早在以前，所有的 HTML 布局还是通过 table，float 以及其他 css 属性来完成。面对复杂的布局，就没有很好的办法了。<br>随着 flexbox 的出现，它专注于创建稳健的响应式页面布局模式，并轻松的正确对齐元素及其内容。如今已是我们的首选。</p>","link":"2018/03/07/css-layout-flex-grid","tags":["CSS","layout"],"categories":["HTML/CSS"]},{"title":"stricky footer的三种解决方案","date":"2018-02-01T13:06:54.000Z","date_formatted":{"ll":"Feb 1, 2018","L":"02/01/2018","MM-DD":"02-01"},"excerpt":"<h1 id=\"写在前面\">写在前面<a href=\"2018/02/01/css-layout-strickyFooter#写在前面\"></a></h1><p>stricky footer设计是最古老和最常见的效果之一，我们都曾经历过类似的情景：</p>\n<blockquote>\n<p>如果页面内容不够长的时候，页脚块粘贴在底部；如果内容足够长时，页脚块会被内容向下推送。</p>\n</blockquote>","link":"2018/02/01/css-layout-strickyFooter","tags":["CSS","layout"],"categories":["HTML/CSS"]},{"title":"2018年已经开始！","date":"2018-01-25T11:45:16.000Z","date_formatted":{"ll":"Jan 25, 2018","L":"01/25/2018","MM-DD":"01-25"},"excerpt":"<h1 id=\"我的2017\">我的2017<a href=\"2018/01/25/life-aboutLife-job#我的2017\"></a></h1><p>最近偶然想起来拿出大一下（2017年2月-3月）给「郑州百格教育」写过的手机端的官网，看了又看，想着如果用这一年的学习，来重做一次这个官网，我会怎么做？觉得自己这一年来应该是有了不小的进步吧！</p>\n<p>关于2017年，太多我已经记不清，我觉得上天还是很眷顾我的，或者说我是幸运的，收到了一些邀请，但是始终都没有达到心中的目标。</p>","link":"2018/01/25/life-aboutLife-job","tags":["岁言心语"],"categories":["岁言心语"]},{"title":"webpack-dev-server","date":"2018-01-19T12:37:03.000Z","date_formatted":{"ll":"Jan 19, 2018","L":"01/19/2018","MM-DD":"01-19"},"excerpt":"<p>我们想要给我们的mock data 找一个接口请求，原版配置在 dev-server.js ，新版的 vue-webpack-template 删除了dev-server.js，改用webpcak.dev.conf.js代替（具体更新见<a href=\"https://github.com/vuejs-templates/webpack/pull/975\" target=\"_blank\" rel=\"noopener\">github：switch to webpack-dev-server</a>）</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/vuecli1.png\" alt=\"switch to webpack-dev-server\" class=\"article-img\"></p>","link":"2018/01/19/vueCl-exExpressDataMock-I-do-t-have-devServer","tags":["express","mock","vueCli","webpcak"],"categories":["Node"]},{"title":"学校寒冬的清晨和深夜","date":"2018-01-10T13:36:04.000Z","date_formatted":{"ll":"Jan 10, 2018","L":"01/10/2018","MM-DD":"01-10"},"excerpt":"<p>最近忙着期末考试前的复习，倒也不紧不慢，反而看到了学校不一样的风景。</p>\n<p>行走匆忙的人，不一定是无心观赏两岸的风景，只是为了心中的彼岸</p>\n<p><img src=\"http://www.chenqaq.com/assets/images/morning.jpg\" alt=\"morning\" class=\"article-img\"></p>\n<p><img src=\"http://www.chenqaq.com/assets/images/night.jpg\" alt=\"night\" class=\"article-img\"></p>","link":"2018/01/10/life-aboutSchool-finalExam","tags":["岁言心语"],"categories":["岁言心语"]},{"title":"使用async和enterproxy控制并发数量","date":"2017-12-31T02:32:00.000Z","date_formatted":{"ll":"Dec 31, 2017","L":"12/31/2017","MM-DD":"12-31"},"excerpt":"<h1 id=\"聊聊并发与并行\">聊聊并发与并行<a href=\"2017/12/31/async-enterproxy-control-concurrency-md#聊聊并发与并行\"></a></h1><p>并发我们经常提及之，不管是web server，app并发无处不在，操作系统中，指一个时间段中几个程序处于已经启动运行到完毕之间，且这几个程序都是在同一处理机上运行，并且任一个时间点只有一个程序在处理机上运行。很多网站都有并发连接数量的限制，所以当请求发送太快的时候会导致返回值为空或报错。更有甚者，有些网站可能因为你发出的并发连接数量过多而当你是在恶意请求，封掉你的ip。</p>","link":"2017/12/31/async-enterproxy-control-concurrency-md","tags":["node","并发，并行"],"categories":["Node"]},{"title":"package.json的正确使用姿势","date":"2017-12-29T07:27:45.000Z","date_formatted":{"ll":"Dec 29, 2017","L":"12/29/2017","MM-DD":"12-29"},"excerpt":"<h1 id=\"写在前面\">写在前面<a href=\"2017/12/29/dependencies-devDependencies#写在前面\"></a></h1><p>刀耕火种的时代已经过去，前端开发急需自动化，工程化。</p>\n<p>有一天，你找到公司新人程序员小T和小F，给他们每个人分配了一个任务。小T和小F微笑的答应了，确定了项目的选型和结构，小T和小F准备安装依赖的模块。但是他们开始对于dependencies和devDependencies并没有那么在意：</p>","link":"2017/12/29/dependencies-devDependencies","tags":["node","前端环境"],"categories":["Node"]},{"title":"Express4.x API (一)：application (译)","date":"2017-12-24T09:48:41.000Z","date_formatted":{"ll":"Dec 24, 2017","L":"12/24/2017","MM-DD":"12-24"},"excerpt":"<h1 id=\"Express4-x-API-译文-系列文章\">Express4.x API 译文 系列文章<a href=\"2017/12/24/express-api-cn-application#Express4-x-API-译文-系列文章\"></a></h1><ul>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8108405.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (一)：application (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8081275.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (二)：request (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8087425.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (三)：Response (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8093717.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (四)：router (译) – 完成</a></li>\n</ul>\n<p>技术库更迭较快，很难使译文和官方的API保持同步，更何况更多的大神看英文和中文一样的流畅，不会花时间去翻译–，所以我们看到<a href=\"http://www.expressjs.com.cn\" target=\"_blank\" rel=\"noopener\">express中文网</a>更多的还是英文，我们只有提升自己的英语能力才能更快的适应库的更新迭代,阅读到最新资料.<br>所以我此次翻译的目的，一是熟悉express文档，二是锻炼自己英语阅读能力；</p>\n<blockquote>\n<p>原文地址：<a href=\"http://www.expressjs.com.cn/4x/api.html#res\" target=\"_blank\" rel=\"noopener\">express.com</a></p>\n</blockquote>","link":"2017/12/24/express-api-cn-application","tags":["express","node"],"categories":["Node"]}]}