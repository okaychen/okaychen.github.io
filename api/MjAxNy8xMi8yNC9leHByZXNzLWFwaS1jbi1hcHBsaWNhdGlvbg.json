{"title":"Express4.x API (一)：application (译)","date":"2017-12-24T09:48:41.000Z","date_formatted":{"ll":"Dec 24, 2017","L":"12/24/2017","MM-DD":"12-24"},"link":"2017/12/24/express-api-cn-application","tags":["express","node"],"categories":["Node"],"updated":"2018-09-21T10:35:33.000Z","content":"<h1 id=\"Express4-x-API-译文-系列文章\">Express4.x API 译文 系列文章<a href=\"2017/12/24/express-api-cn-application#Express4-x-API-译文-系列文章\"></a></h1><ul>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8108405.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (一)：application (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8081275.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (二)：request (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8087425.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (三)：Response (译) – 完成</a></li>\n<li><a href=\"http://www.cnblogs.com/okaychen/p/8093717.html\" target=\"_blank\" rel=\"noopener\">Express4.x API (四)：router (译) – 完成</a></li>\n</ul>\n<p>技术库更迭较快，很难使译文和官方的API保持同步，更何况更多的大神看英文和中文一样的流畅，不会花时间去翻译–，所以我们看到<a href=\"http://www.expressjs.com.cn\" target=\"_blank\" rel=\"noopener\">express中文网</a>更多的还是英文，我们只有提升自己的英语能力才能更快的适应库的更新迭代,阅读到最新资料.<br>所以我此次翻译的目的，一是熟悉express文档，二是锻炼自己英语阅读能力；</p>\n<blockquote>\n<p>原文地址：<a href=\"http://www.expressjs.com.cn/4x/api.html#res\" target=\"_blank\" rel=\"noopener\">express.com</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"Application\">Application<a href=\"2017/12/24/express-api-cn-application#Application\"></a></h1><p>app对象是指一个Express应用程序，通过调用的顶层的express()函数创造它</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></div></figure>\n<p>app对象有以下这些方法</p>\n<ul>\n<li>路由HTTP请求；例如：app.METHOD和app.param</li>\n<li>配置中间件；例如：app.router</li>\n<li>渲染HTML视图；例如：app.render</li>\n<li>注册模板引擎；例如：app.engine</li>\n</ul>\n<p>他还具有影响应用程序行为的设置(属性)；获得更多的信息，见<a href=\"http://www.expressjs.com.cn/4x/api.html#app.settings.table\" target=\"_blank\" rel=\"noopener\">Application settings</a></p>\n<h2 id=\"Properties\">Properties<a href=\"2017/12/24/express-api-cn-application#Properties\"></a></h2><h3 id=\"app-locals\">app.locals<a href=\"2017/12/24/express-api-cn-application#app-locals\"></a></h3><p>app.locals是一个JavaScript对象，它的属性是应用程序中的局部变量</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.locals.title  <span class=\"comment\">// \"My App\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.locals.email  <span class=\"comment\">// \"me@myapp.com\"</span></span><br></pre></td></tr></table></div></figure>\n<p>一旦设置，<code>app.locals</code>属性的值将会贯穿整个生命周期。对比<code>res.locals</code>属性的特性，<code>res.locals</code>仅适用于请求的生命周期</p>\n<p>你可以访问应用程序中呈现的模板中的本地变量，这对于想模板提供协助函数以及<code>app-level</code>非常有用。但是请注意，您不能访问中间件的局部变量</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.locals.title = <span class=\"string\">\"My App\"</span>;</span><br><span class=\"line\">app.locals.strftime = <span class=\"built_in\">require</span>(<span class=\"string\">'strftime'</span>);</span><br><span class=\"line\">app.locals.email = <span class=\"string\">'me@myapp.com'</span>;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-mountpath\">app.mountpath<a href=\"2017/12/24/express-api-cn-application#app-mountpath\"></a></h3><p>app.mountpath属性是路径模式的子应用程序安装</p>\n<blockquote>\n<p>子应用程序是一个Express实例，可以用于处理对路由的请求</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();  <span class=\"comment\">// 主要的应用程序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> admin = express();  <span class=\"comment\">// 子应用程序</span></span><br><span class=\"line\"></span><br><span class=\"line\">admin.get(<span class=\"string\">'/'</span>，<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(admin.mountpath)  <span class=\"comment\">// admin</span></span><br><span class=\"line\">    res.send(<span class=\"string\">'Admin Homepage'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/admin'</span>,admin) <span class=\"comment\">// 挂载子应用程序</span></span><br></pre></td></tr></table></div></figure>\n<p>这类似于req对象中的<code>baseUrl</code>属性，除了<code>baseUrl</code>返回匹配的URL路径，而不是匹配的模式(s).</p>\n<p>如果子应用程序挂载在多个路径模式上，<code>app.mountpath</code>返回它挂载的模式列表，像下面所展示的例子这样：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> admin = express();</span><br><span class=\"line\"></span><br><span class=\"line\">admin.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(admin.mountpath)   <span class=\"comment\">// [ '/adm*n','/manager' ]</span></span><br><span class=\"line\">    res.send(<span class=\"string\">'Admin Homepage'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> secret = express();</span><br><span class=\"line\">secret.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(secret.mountpath); <span class=\"comment\">//secr*t</span></span><br><span class=\"line\">    res.send(<span class=\"string\">'Admin Secret'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">admin.use(<span class=\"string\">'/secr*t'</span>, secret); </span><br><span class=\"line\">app.use([<span class=\"string\">'/adm*n'</span>, <span class=\"string\">'/manager'</span>], admin);</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Events\">Events<a href=\"2017/12/24/express-api-cn-application#Events\"></a></h2><h3 id=\"app-on-‘mount’-callback-parent\">app.on(‘mount’,callback(parent))<a href=\"2017/12/24/express-api-cn-application#app-on-‘mount’-callback-parent\"></a></h3><p>当子程序被挂载到父程序时，mount事件被发射。父程序对象作为参数，传递给回调方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> admin = express();</span><br><span class=\"line\"></span><br><span class=\"line\">admin.on(<span class=\"string\">'mount'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">parent</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Admin Mount'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(parent);   <span class=\"comment\">// 指父应用程序</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">admin.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'Admin homePage'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/admin'</span>,admin);</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Methods\">Methods<a href=\"2017/12/24/express-api-cn-application#Methods\"></a></h2><h3 id=\"app-all-path-callback-callback-…\">app.all(path,callback[,callback …])<a href=\"2017/12/24/express-api-cn-application#app-all-path-callback-callback-…\"></a></h3><p>app.all方法和标准的app.METHOD()方法类似，除了它匹配所有的HTTP动词。对于给一个特殊前缀映射一个全局的逻辑处理，或者无条件匹配，它是很有效的。例如，如果你把下面内容放在所有其他的路由定义的前面，它要求所有从这个点开始的路由需要认证和自动加载一个用户。这些回调并不一定是终点：<code>loadUser</code>可以在完成了上一个任务后，调用<code>next()</code>来继续匹配随后的路由。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.all(<span class=\"string\">'*'</span>,requireAuthentication,loadUser)</span><br></pre></td></tr></table></div></figure>\n<p>或者这种相等的形式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.all(<span class=\"string\">'*'</span>,requireAuthentication);</span><br><span class=\"line\">app.all(<span class=\"string\">'*'</span>,loadUser)</span><br></pre></td></tr></table></div></figure>\n\n<p>另一个例子是全局白名单的方法（white-listed “global” functionality）。这个例子和前面很像，然而它只是限制以/api开头的路径。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.<span class=\"keyword\">all</span>(<span class=\"string\">'/api/*'</span>,requireAuthentication);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-delete-path-callback-callback-…\">app.delete(path, callback [, callback …])<a href=\"2017/12/24/express-api-cn-application#app-delete-path-callback-callback-…\"></a></h3><p>路由HTTP DELETE请求到有特殊回调方法的特殊的路径。获取更多的信息，可以查阅<a href=\"http://www.expressjs.com.cn/guide/routing.html\" target=\"_blank\" rel=\"noopener\">routing guide</a></p>\n<p>你可以提供多个回调函数，他们的作用和中间件一样，除了这些回调可以通过调用next(‘router’)来绕过剩余的路由回调。你可以使用这个机制来为一个路由设置一些前提条件，如果不能满足当前路由的处理条件，那么你可以传递控制到随后的路由。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.delete(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'DELETE request to homepage'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"app-disable-name\">app.disable(name)<a href=\"2017/12/24/express-api-cn-application#app-disable-name\"></a></h3><p>将设置名为name的值为false，此处的name是<a href=\"http://www.expressjs.com.cn/4x/api.html#app.settings.table\" target=\"_blank\" rel=\"noopener\">app settings table</a>中各属性的一个。调用app.set(‘foo’,false)和app.disable(‘foo’)是等价的</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.disable(<span class=\"string\">'trust proxy'</span>);</span><br><span class=\"line\">app.get(<span class=\"string\">'trust proxy'</span>);   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"app-disabled-name\">app.disabled(name)<a href=\"2017/12/24/express-api-cn-application#app-disabled-name\"></a></h3><p>如果<code>name</code>被禁用则返回true，此处的name是<a href=\"http://www.expressjs.com.cn/4x/api.html#app.settings.table\" target=\"_blank\" rel=\"noopener\">app settings table</a>中各属性的一个</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.disabled(<span class=\"string\">'trust proxy'</span>);  <span class=\"comment\">// true</span></span><br><span class=\"line\">app.enable(<span class=\"string\">'trust proxy'</span>);</span><br><span class=\"line\">app.disabled(<span class=\"string\">'trust proxy'</span>);  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-enable-name\">app.enable(name)<a href=\"2017/12/24/express-api-cn-application#app-enable-name\"></a></h3><p>设置布尔类型的设置值name为true，此处的name是<a href=\"http://www.expressjs.com.cn/4x/api.html#app.settings.table\" target=\"_blank\" rel=\"noopener\">app settings table</a>中各属性的一个。调用app.set(‘foo’, true)和调用app.enable(‘foo’)是等价的。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.enable(<span class=\"string\">'trust proxy'</span>);</span><br><span class=\"line\">app.get(<span class=\"string\">'trust proxy'</span>)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"app-enabled-name\">app.enabled(name)<a href=\"2017/12/24/express-api-cn-application#app-enabled-name\"></a></h3><p>如果<code>name</code>可用则返回true，此处的name是<a href=\"http://www.expressjs.com.cn/4x/api.html#app.settings.table\" target=\"_blank\" rel=\"noopener\">app settings table</a>中各属性的一个。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.enabled(<span class=\"string\">'trust proxy'</span>)   <span class=\"comment\">// false</span></span><br><span class=\"line\">app.enable(<span class=\"string\">'trust proxy'</span>)   </span><br><span class=\"line\">app.enabled(<span class=\"string\">'trust proxy'</span>)   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-engine-ext-callback\">app.engine(ext,callback)<a href=\"2017/12/24/express-api-cn-application#app-engine-ext-callback\"></a></h3><p>注册给定引擎的回调，用来渲染ext文件。默认情况下，Express需要使用require()来加载基于文件扩展的引擎。例如，如果你尝试渲染一个<code>foo.jade</code>文件，Express在内部调用下面内容，同时缓存<code>require()</code>结果供随后来调用去提高性能</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'jade'</span>,<span class=\"built_in\">require</span>(<span class=\"string\">'jade'</span>).__express);</span><br></pre></td></tr></table></div></figure>\n<p>使用下面这种方法，来处理没有办法开箱即用的.express方法的模板，或者你希望使用不同的扩展名。</p>\n<p>举个栗子，使用ejs模板引擎来渲染.html文件：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'html'</span>,<span class=\"built_in\">require</span>(<span class=\"string\">'ejs'</span>).renderFile);</span><br></pre></td></tr></table></div></figure>\n\n<p>在这个例子中，ejs提供了一个<code>.renderFile</code>方法，这个方法满足了Express规定的签名规则：(path, options, callback)，然而记住在内部它只是<code>ejs.__express</code>的一个别名，所以你可以在不做任何事的情况下直接使用.ejs扩展。一些模板引擎没有遵循这种规范，<code>consolidate.js</code>库映射模板引擎以下面的使用方式，所以他们可以无缝的和Express工作。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> engines = <span class=\"built_in\">require</span>(<span class=\"string\">'consolidate'</span>);</span><br><span class=\"line\">app.engine(<span class=\"string\">'haml'</span>,engines.haml);</span><br><span class=\"line\">app.engine(<span class=\"string\">'html'</span>,engines.hogan);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-get-name\">app.get(name)<a href=\"2017/12/24/express-api-cn-application#app-get-name\"></a></h3><p>获得设置名为name的app设置的值，此处的name是<a href=\"http://www.expressjs.com.cn/4x/api.html#app.settings.table\" target=\"_blank\" rel=\"noopener\">app settings table</a>中各属性的一个。 如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'title'</span>);  <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">app.set(<span class=\"string\">'title'</span>,<span class=\"string\">'My site'</span>);</span><br><span class=\"line\">app.get(<span class=\"string\">'title'</span>)  <span class=\"comment\">// 'My site'</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-get-path-callback-callback-…\">app.get(path, callback [, callback …])<a href=\"2017/12/24/express-api-cn-application#app-get-path-callback-callback-…\"></a></h3><p>使用指定的回调函数将HTTP请求路由到指定的路径。获取跟多的信息，可以查阅<a href=\"http://expressjs.com/guide/routing.html\" target=\"_blank\" rel=\"noopener\">routing guide</a>。你可以提供多个回调函数，他们的内容和中间件一样，除了这些回调可以通过调用next(‘router’)来绕过剩余的路由回调。你可以使用这个机制来为一个路由设置一些前提条件，如果请求没能满足当前路由的处理条件，那么传递控制到随后的路由。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.<span class=\"built_in\">get</span>(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"title\">req</span>,<span class=\"title\">res</span>)&#123;</span></span><br><span class=\"line\">    res.<span class=\"built_in\">send</span>(<span class=\"string\">'GET request to homepage'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-listen-port-hostname-backlog-callback\">app.listen(port, [hostname], [backlog], [callback])<a href=\"2017/12/24/express-api-cn-application#app-listen-port-hostname-backlog-callback\"></a></h3><p>绑定程序监听端口到指定的<code>主机</code>和<code>端口号</code>。这个方法和Node中的<a href=\"http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback\" target=\"_blank\" rel=\"noopener\">http.Server.listen()</a>是一样的</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></div></figure>\n<p>通过调用express()返回得到的app实际上是一个JavaScript的Function，被设计用来作为一个回调传递给<code>NODE HTTP servers</code>来处理请求。这样，其就可以很简单的基于同一份代码提供的http和https版本，所以app没有从这些继承（它只是一个简单的回调）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span>  http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(app).listen(<span class=\"number\">80</span>);</span><br><span class=\"line\">http.createServer(options,app).listen(<span class=\"number\">443</span>)</span><br></pre></td></tr></table></div></figure>\n<p>app.listen()方法是下面所示的一个便捷的方法（只针对HTTP协议）：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.listen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> server = http.createServer(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server.listen.apply(server, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-METHOD-path-callback-callback-…\">app.METHOD(path,callback [,callback …])<a href=\"2017/12/24/express-api-cn-application#app-METHOD-path-callback-callback-…\"></a></h3><p>路由HTTP请求，METHOD是这个请求的HTTP方法，比如GET,POST,PUT等等，小写。所以，实际方法是app.get,app.post,app.put等等，下面有关于方法完整的表。</p>\n<p>获取更多信息，请看<a href=\"http://expressjs.com/guide/routing.html\" target=\"_blank\" rel=\"noopener\">routing guide</a>。 Express支持下面的路由方法，对应与同名的HTTP方法：</p>\n<p>具体见<a href=\"http://www.expressjs.com.cn/4x/api.html#app.METHOD\" target=\"_blank\" rel=\"noopener\">app.METHOD</a></p>\n<blockquote>\n<p>如果使用上述方法时，导致了无效的JavaScript变量名，可以使用中括号，比如：app[‘m-search’](‘/‘, function ….</p>\n</blockquote>\n<p>你可以提供多个回调函数，它们的行为和中间件一样，除了这些回调可以通过调用next(‘router’)来绕过剩余的路由回调。你可以使用这个机制来为一个路由设置一些前提条件，如果请求没有满足当前路由的处理条件，那么传递控制到随后的路由。（我的话：”！这一段看了好几遍啦- -，理解next传递非常重要性”）</p>\n<blockquote>\n<p>本API文档把使用比较多的HTTP方法app.get()，app.post，app.put()，app.delete()作为一个个单独的项进行说明。然而，其他上述列出的方法以完全相同的方式工作。</p>\n</blockquote>\n<p>有一种特殊的路由方法，<code>app.all()</code>，这不是来自任何HTTP方法。他在所有请求方法的路径上加载中间件，其对于所有的方法都有效</p>\n<h3 id=\"app-param-name-callback\">app.param([name],callback)<a href=\"2017/12/24/express-api-cn-application#app-param-name-callback\"></a></h3><p>给路由参数添加回调触发器，这里的name是参数名或者参数数组，function是回调方法。回调方法的参数按序是请求对象，响应对象，下个中间件，参数值和参数名。 如果name是数组，会按照各个参数在数组中被声明的顺序将回调触发器注册下来。还有，对于除了最后一个参数的其他参数，在他们的回调中调用next()来调用下个声明参数的回调。只有一个参数，那么就是最后一个参数，和数组中最后一个参数是一样的。 例如，当:user出现在路由路径中，你可以映射用户加载的逻辑处理来自动提供req.user给这个路由，或者对输入的参数进行验证。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.param(<span class=\"string\">'user'</span><span class=\"function\">.<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next,id</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 尝试从用户模型获取用户详细信息并将其附加到请求对象</span></span><br><span class=\"line\">    User.find(id,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,user</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            next(err);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(user)&#123;</span><br><span class=\"line\">            req.user = user;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'fail to load user'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>对于Param的回调定义的路由来说，他们是局部的。它们不会被挂载的app或者路由继承。所以，定义在app上的Param回调只有是在app上的路由具有这个路由参数时才起作用。</p>\n<p>在定义param的路由上，param回调都是第一个被调用的，它们在一个请求-响应循环中都会被调用一次并且只有一次，即使多个路由都匹配，如下面的栗子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.param(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next,id</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'CALLED ONLY NOCE'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this match'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matches too'</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>当GET/user/42,得到下面结果</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">CALLED ONLY NOCE</span><br><span class=\"line\">although <span class=\"keyword\">this</span> matches</span><br><span class=\"line\">and <span class=\"keyword\">this</span> matches too</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.param([<span class=\"string\">'id'</span>,<span class=\"string\">'page'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next,value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'CALLED ONLY ONCE with'</span>,value);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:id/:page'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this matches'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:id/:page'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matchs too'</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>当执行GET /user/42/3，结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">CALLED ONLY ONCE <span class=\"keyword\">with</span> <span class=\"number\">42</span></span><br><span class=\"line\">CALLED ONLY ONCE <span class=\"keyword\">with</span> <span class=\"number\">3</span></span><br><span class=\"line\">although <span class=\"keyword\">this</span> matches</span><br><span class=\"line\">and <span class=\"keyword\">this</span> mathes too</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>下面章节描述的app.param(callback)在v4.11.0之后被弃用。</p>\n</blockquote>\n<p>通过只传递一个回调参数给app.param(name, callback)方法，app.param(naem, callback)方法的行为将被完全改变。这个回调参数是关于app.param(name, callback)该具有怎样的行为的一个自定义方法，这个方法必须接受两个参数并且返回一个中间件。 这个回调的第一个参数就是需要捕获的url的参数名，第二个参数可以是任一的JavaScript对象，其可能在实现返回一个中间件时被使用。 这个回调方法返回的中间件决定了当URL中包含这个参数时所采取的行为。 </p>\n<p>在下面的例子中，app.param(name, callback)参数签名被修改成了app.param(name, accessId)。替换接受一个参数名和回调，app.param()现在接受一个参数名和一个数字。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义app.param()的行为</span></span><br><span class=\"line\">app.param(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param,option</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next,val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val == option)&#123;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.sendStatus(<span class=\"number\">403</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用定制的app.param()</span></span><br><span class=\"line\">app.param(<span class=\"string\">'id'</span>,<span class=\"number\">1337</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发捕获的路由</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'OK'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ready'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.param(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param,validator</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next,val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(validator(val))&#123;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.sendStatus(<span class=\"number\">403</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.param(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">candidate</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(candidate)) &amp;&amp; <span class=\"built_in\">isFinite</span>(candidate);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>在使用正则表达式，不要使用.。例如，你不能使用/user-.+/来捕获user-gami，用使用[\\s\\S]或者[\\w\\&gt;W]来代替(正如/user-[\\s\\S]+/)。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//captures '1-a_6' but not '543-azser-sder'</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/[0-9]+-[[\\\\w]]*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>); </span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">captures</span> '1-<span class=\"title\">a_6</span>' <span class=\"title\">and</span> '543-<span class=\"title\">az</span>(<span class=\"params\">ser<span class=\"string\">\"-sder' but not '5-a s'</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">router.get('/[0-9]+-[[\\\\S]]*', function); </span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">//captures all (equivalent to '.*')</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">router.get('[[\\\\s\\\\S]]*', function);</span></span></span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-path\">app.path()<a href=\"2017/12/24/express-api-cn-application#app-path\"></a></h3><p>返回应用程序的规范路径（字符串）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">app</span> = express()</span><br><span class=\"line\">  , blog = express()</span><br><span class=\"line\">  , blogAdmin = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">app</span>.<span class=\"keyword\">use</span>('/blog', blog);</span><br><span class=\"line\">blog.<span class=\"keyword\">use</span>('/admin', blogAdmin);</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">app</span>.path()); <span class=\"comment\">// ''</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(blog.path()); <span class=\"comment\">// '/blog'</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(blogAdmin.path()); <span class=\"comment\">// '/blog/admin'</span></span><br></pre></td></tr></table></div></figure>\n<p>如果app挂载很复杂下，那么这个方法的行为也会很复杂：一种更好用的方式是使用<code>req.baseUrl</code>来获得这个app的典型路径。</p>\n<h3 id=\"app-post-path-callback-callback-…\">app.post(path, callback, [callback …])<a href=\"2017/12/24/express-api-cn-application#app-post-path-callback-callback-…\"></a></h3><p>使用指定的回调函数将HTTP POST请求路由到指定的路径。有关更多信息，请参见<a href=\"http://www.expressjs.com.cn/guide/routing.html\" target=\"_blank\" rel=\"noopener\">routing guide</a>。</p>\n<p>你可以提供多个回调函数，它们的行为和中间件一样，除了这些回调可以通过调用next(‘router’)来绕过剩余的路由回调。你可以使用这个机制来为一个路由设置一些前提条件，如果请求没能满足当前路由的处理条件，那么传递控制到随后的路由</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'POST request to homepage'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-put-path-callback-callback-…\">app.put(path, callback [, callback …])<a href=\"2017/12/24/express-api-cn-application#app-put-path-callback-callback-…\"></a></h3><p>使用指定的回调函数将HTTP PUT请求路由到指定的路径。有关更多信息，请参见<a href=\"http://www.expressjs.com.cn/guide/routing.html\" target=\"_blank\" rel=\"noopener\">routing guide</a>。</p>\n<p>你可以提供多个回调函数，它们的行为和中间件一样，除了这些回调可以通过调用next(‘router’)来绕过剩余的路由回调。你可以使用这个机制来为一个路由设置一些前提条件，如果请求没能满足当前路由的处理条件，那么传递控制到随后的路由</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.put(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'PUT request to homepage'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-render-view-locals-callback\">app.render(view, [locals], callback)<a href=\"2017/12/24/express-api-cn-application#app-render-view-locals-callback\"></a></h3><p>通过回调函数返回视图的呈现HTML,它可以接受一个可选的参数，可选参数包含了这个view需要用到的本地数据。这个方法类似于res.render()，除了它不能把渲染得到的HTML文本发送给客户端。</p>\n<blockquote>\n<p>将app.render()当作是可以生成渲染视图字符串的工具方法。在res.render()内部，就是使用的app.render()来渲染视图。</p>\n</blockquote>\n<blockquote>\n<p>如果使能了视图缓存，那么本地变量缓存就会保留。如果你想在开发的过程中缓存视图，设置它为true。在生产环境中，视图缓存默认是打开的。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.render(<span class=\"string\">'email'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, html</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.render(<span class=\"string\">'email'</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Tobi'</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, html</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-route-path\">app.route(path)<a href=\"2017/12/24/express-api-cn-application#app-route-path\"></a></h3><p>返回一个单例模式的路由的实例，之后你可以在其上施加各种HTTP动作的中间件。使用app.route()来避免重复路由名字</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.route(<span class=\"string\">'/events'</span>)</span><br><span class=\"line\">.all(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// runs for all HTTP verbs first</span></span><br><span class=\"line\">  <span class=\"comment\">// think of it as route specific middleware!</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.json(...);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.post(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// maybe add a new event...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"app-set-name-value\">app.set(name, value)<a href=\"2017/12/24/express-api-cn-application#app-set-name-value\"></a></h3><p>给 name 设置项赋 value 值，name 是 <a href=\"http://www.runoob.com/w3cnote/express-4-x-api.html#app.settings.table\" target=\"_blank\" rel=\"noopener\">Application settings</a> 中属性的一项。 </p>\n<p>对于一个类型是布尔型的属性调用app.set(‘foo’, ture)等价于调用app.enable(‘foo’)。同样的，调用app.set(‘foo’, false)等价于调用app.disable(‘foo’)。</p>\n<p>可以使用app.get()来取得设置的值：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">'title'</span>, <span class=\"string\">'My Site'</span>);</span><br><span class=\"line\">app.get(<span class=\"string\">'title'</span>); <span class=\"comment\">// 'My Site'</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"Application-Settings\">Application Settings<a href=\"2017/12/24/express-api-cn-application#Application-Settings\"></a></h4><p>如果name是程序设置之一，它将影响到程序的行为。下边列出了程序中的设置。<br>见 <a href=\"http://www.expressjs.com.cn/4x/api.html#app.set\" target=\"_blank\" rel=\"noopener\">app.set</a></p>\n<h3 id=\"app-use-path-function-function…\">app.use([path,] function [, function…])<a href=\"2017/12/24/express-api-cn-application#app-use-path-function-function…\"></a></h3><p>挂载中间件方法到路径上。如果路径未指定，那么默认为”/“。</p>\n<blockquote>\n<p>一个路由将匹配任何路径如果这个路径以这个路由设置路径后紧跟着”/“。比如：app.use(‘/appale’, …)将匹配”/apple”，”/apple/images”，”/apple/images/news”等。</p>\n</blockquote>\n<blockquote>\n<p>中间件中的req.originalUrl是req.baseUrl和req.path的组合，如下面的例子所示。</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/admin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// GET 'http://www.example.com/admin/new'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.originalUrl); <span class=\"comment\">// '/admin/new'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.baseUrl); <span class=\"comment\">// '/admin'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.path); <span class=\"comment\">// '/new'</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>在一个路径上挂载一个中间件之后，每当请求的路径的前缀部分匹配了这个路由路径，那么这个中间件就会被执行。 由于默认的路径为/，中间件挂载没有指定路径，那么对于每个请求，这个中间件都会被执行</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 此中间件将不允许请求超出它的范围。</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time: %d'</span>, <span class=\"built_in\">Date</span>.now());</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p>路径(path)可以是表示路径的字符串、路径模式、匹配路径的正则表达式或其组合数组</p>\n<p>下面是中间件的简单示例：</p>\n<p>具体见<a href=\"http://www.expressjs.com.cn/4x/api.html#app.use\" target=\"_blank\" rel=\"noopener\">app.use</a></p>\n<p>下面是一些例子，在Express程序中使用express.static中间件。<br>为程序托管位于程序目录下的public目录下的静态资源：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /style.css etc</span></span><br><span class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/public'</span>));</span><br></pre></td></tr></table></div></figure>\n<p>在/static路径下挂载中间件来提供静态资源托管服务，只当请求是以/static为前缀的时候。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /static/style.css etc.</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/static'</span>, express.static(express.__dirname + <span class=\"string\">'/public'</span>));</span><br></pre></td></tr></table></div></figure>\n<p>通过在设置静态资源中间件之后加载日志中间件来关闭静态资源请求的日志。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/public'</span>));</span><br><span class=\"line\">app.use(logger());</span><br></pre></td></tr></table></div></figure>\n<p>托管静态资源从不同的路径，但./public路径比其他更容易被匹配：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/public'</span>));</span><br><span class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/files'</span>));</span><br><span class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/uploads'</span>));</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"写在后面\">写在后面<a href=\"2017/12/24/express-api-cn-application#写在后面\"></a></h1><p>Express文档核心的四大部分app，request，response，router，到此已经完成。简单的总结</p>\n<ol>\n<li><p>通过调用express()返回得到的app实际上是一个JavaScript的Function，它是一个Express的应用实例；app对象具有HTTP请求，配置中间件，渲染HTML视图，注册模板引擎这四大功能。它还有一些属性设置，这些属性可以改变程序的行为</p>\n</li>\n<li><p>request对象即表示HTTP请求，包含了请求查询字符串，参数，内容，HTTP头等属性</p>\n</li>\n<li><p>response对象则表示HTTP响应，即在受到请求时向客户端发送的HTTP响应数据</p>\n</li>\n<li><p>每个Express程序有一个内建的app路由，顶层的express对象有一个Router()方法，你可以使用Router()来创建一个新的router对象，你可以把它当做一个<code>mini-application</code>，它具有操作路由和中间件的能力，有些方法和app类同</p>\n</li>\n</ol>\n<p>到此<code>Express4.x API 译文 系列文章</code>已经完成。<br>本人学识有限，难免有所纰漏或者理解不当之处，翻译仅仅是方便个人学习交流使用，无其他用意（如果有不妥之处，请联系本人删除），原文地址：<a href=\"http://www.expressjs.com.cn/4x/api.html#res\" target=\"_blank\" rel=\"noopener\">expressjs.com</a></p>\n","prev":{"title":"dependencies和devDependencies的正确使用姿势","link":"2017/12/29/dependencies-devDependencies"},"next":{"title":"Express4.x API (四)：Router (译)","link":"2017/12/23/express-api-cn-router"},"plink":"//litten.me/2017/12/24/express-api-cn-application/","toc":[{"title":"Express4.x API 译文 系列文章","id":"Express4-x-API-译文-系列文章","index":"1"},{"title":"Application","id":"Application","index":"2","children":[{"title":"Properties","id":"Properties","index":"2.1","children":[{"title":"app.locals","id":"app-locals","index":"2.1.1"},{"title":"app.mountpath","id":"app-mountpath","index":"2.1.2"}]},{"title":"Events","id":"Events","index":"2.2","children":[{"title":"app.on(‘mount’,callback(parent))","id":"app-on-‘mount’-callback-parent","index":"2.2.1"}]},{"title":"Methods","id":"Methods","index":"2.3","children":[{"title":"app.all(path,callback[,callback …])","id":"app-all-path-callback-callback-…","index":"2.3.1"},{"title":"app.delete(path, callback [, callback …])","id":"app-delete-path-callback-callback-…","index":"2.3.2"},{"title":"app.disable(name)","id":"app-disable-name","index":"2.3.3"},{"title":"app.disabled(name)","id":"app-disabled-name","index":"2.3.4"},{"title":"app.enable(name)","id":"app-enable-name","index":"2.3.5"},{"title":"app.enabled(name)","id":"app-enabled-name","index":"2.3.6"},{"title":"app.engine(ext,callback)","id":"app-engine-ext-callback","index":"2.3.7"},{"title":"app.get(name)","id":"app-get-name","index":"2.3.8"},{"title":"app.get(path, callback [, callback …])","id":"app-get-path-callback-callback-…","index":"2.3.9"},{"title":"app.listen(port, [hostname], [backlog], [callback])","id":"app-listen-port-hostname-backlog-callback","index":"2.3.10"},{"title":"app.METHOD(path,callback [,callback …])","id":"app-METHOD-path-callback-callback-…","index":"2.3.11"},{"title":"app.param([name],callback)","id":"app-param-name-callback","index":"2.3.12"},{"title":"app.path()","id":"app-path","index":"2.3.13"},{"title":"app.post(path, callback, [callback …])","id":"app-post-path-callback-callback-…","index":"2.3.14"},{"title":"app.put(path, callback [, callback …])","id":"app-put-path-callback-callback-…","index":"2.3.15"},{"title":"app.render(view, [locals], callback)","id":"app-render-view-locals-callback","index":"2.3.16"},{"title":"app.route(path)","id":"app-route-path","index":"2.3.17"},{"title":"app.set(name, value)","id":"app-set-name-value","index":"2.3.18"},{"title":"app.use([path,] function [, function…])","id":"app-use-path-function-function…","index":"2.3.19"}]}]},{"title":"写在后面","id":"写在后面","index":"3"}],"copyright":{"custom":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}